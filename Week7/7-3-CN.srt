1
00:00:00,659 --> 00:00:03,350
因此，在之前的视频我们计算了培根数

2
00:00:03,350 --> 00:00:07,660
在Excel中这是可行的，但需要花费我们很多时间。

3
00:00:07,660 --> 00:00:11,660
我不怕承认，我花了 约五小时想出这个

4
00:00:11,660 --> 00:00:15,620
解决方案，我使用Excel非常得心应手，

5
00:00:15,620 --> 00:00:20,289
所以这不会是你想要的解决方案。 事实上， 我希望

6
00:00:20,289 --> 00:00:26,039

在你的心中有这样的东西：WIIIIEEEEE，无Excel警告！

7
00:00:26,039 --> 00:00:29,420
如果在你的日常生活中，你正在制作一个 解决方案

8
00:00:29,420 --> 00:00:33,350
花费你更多时间，得把10个VLOOKUP 组合起来，

9
00:00:33,350 --> 00:00:36,820
有些东西是关闭的。 你应该会想：

10
00:00:36,820 --> 00:00:40,649
我在使用正确的工具做这份工作吗，

11
00:00:40,649 --> 00:00:44,660
这是我做这件事最好的办法吗？ 当然，问题出现了 -

12
00:00:44,660 --> 00:00:48,559
我们应该用什么？ 什么是比电子表格

13
00:00:48,559 --> 00:00:52,680
更好用的工具？ 编程 怎么样？

14
00:00:52,680 --> 00:00:57,120
如果你使用的编程 语言的话，那岂不是更容易，因为编程是

15
00:00:57,120 --> 00:00:58,550
不限于

16
00:00:58,550 --> 00:01:03,140
Excel的行和列，所以你可以 做任何你想要做的事。

17
00:01:03,140 --> 00:01:08,500

这可能是此问题的一个很好的解决方案，而Excel在这里确实是不太适合。

18
00:01:08,500 --> 00:01:12,080
不过，我有点像一个霍比特人

19
00:01:12,080 --> 00:01:16,550
我喜欢留在我的舒适郡， 我不想离开我

20
00:01:16,550 --> 00:01:21,110
舒适的Excel的家，去 我不熟悉的

21
00:01:21,110 --> 00:01:27,070
编程语言。 当然，我们可以 用VB。

22
00:01:27,070 --> 00:01:30,850
Visual Basic for Applications是
一种Excel内嵌的编程语言，

23
00:01:30,850 --> 00:01:35,380
也许你已经使用过它了，

24
00:01:35,380 --> 00:01:38,040
而你可以利用它作为一种编程语言

25
00:01:38,040 --> 00:01:41,310
自动化你的电子表格 ， 计算你

26
00:01:41,310 --> 00:01:43,590
不能使用公式来完成的东西。 这是 一种

27
00:01:43,590 --> 00:01:45,160
可能性，如果你在之前已经用

28
00:01:45,160 --> 00:01:46,380
VBA工作，

29
00:01:46,380 --> 00:01:49,820
我再次让你用VBA来尝试解决 培根谜题，

30
00:01:49,820 --> 00:01:52,920
这应该比用公式

31
00:01:52,920 --> 00:01:58,570
容易得多。 然而，这不是 我们会在这个过程中使用的。

32
00:01:58,570 --> 00:02:01,900
我们将使用被称为Python的语言来自动化我们的电子表格

33
00:02:01,900 --> 00:02:07,180
。 那么，为什么选择使用Python 呢？
我喜欢用Python的原因之一 是

34
00:02:07,180 --> 00:02:09,850
这是目前在大学里教导的首要 程序设计语言

35
00:02:09,850 --> 00:02:12,410
。 所以在未来几年

36
00:02:12,410 --> 00:02:16,330
世界各地会有很多人 知道如何使用

37
00:02:16,330 --> 00:02:17,710
Python编程。

38
00:02:17,710 --> 00:02:21,130
它也是非常容易学习的，

39
00:02:21,130 --> 00:02:25,270
你在这段视频中的例子就会看到， 语法，即编程语言编写的方式

40
00:02:25,270 --> 00:02:30,300
是很容易的，Python周围也有一个大的 生态系统
，这意味着很多

41
00:02:30,300 --> 00:02:30,630
的

42
00:02:30,630 --> 00:02:34,940
小Python程序集，叫做库， 存在于世界上

43
00:02:34,940 --> 00:02:38,140
解决问题，如果你有这样的 问题

44
00:02:38,140 --> 00:02:41,910
你不需要自己在Python中写， 你可以使用别人已经创建

45
00:02:41,910 --> 00:02:45,280
的程序集。 所以 这些都是

46
00:02:45,280 --> 00:02:50,370
与VBA相比我更喜欢Python的原因，但是VBA
也是一种很好的编程语言，

47
00:02:50,370 --> 00:02:53,530
你可以使用它去解决这类 问题。

48
00:02:54,080 --> 00:02:56,460
但是，如果我想使用Python ，

49
00:02:56,470 --> 00:03:00,520
我需要放弃电子制表软件吗？ 你可以。

50
00:03:00,520 --> 00:03:05,470
你可以完全脱离Excel使用Python，
但你必须做很多的练习，

51
00:03:05,470 --> 00:03:11,340
你必须将你的数据从电子数据表转移到文本文件 ，所以...

52
00:03:11,340 --> 00:03:14,490
我可不想那样做，我想使用Python和Excel，

53
00:03:14,490 --> 00:03:17,520
两个都要。 幸运的是，有一个解决方案。

54
00:03:17,520 --> 00:03:23,100
有一个很酷的程序叫DataNitro 它允许你在Excel中

55
00:03:23,100 --> 00:03:28,860
使用Python。 就像VBA，你可以
使用Python脚本化电子表格。

56
00:03:29,420 --> 00:03:32,560
遗憾的是该解决方案只能 用于Windows，

57
00:03:32,560 --> 00:03:37,060
但也有适用于Mac和 Linux
的替代品，我们会把替代品的链接

58
00:03:37,060 --> 00:03:40,069
放在课程页面上。 因此，让我们尝试使用

59
00:03:40,069 --> 00:03:44,290
DataNitro，在这里你可以看到它，如果 你有敏锐的眼睛

60
00:03:44,290 --> 00:03:48,150
那你一定在以前一个视频的截图中见过

61
00:03:48,150 --> 00:03:53,400
DataNitro插件。 所以， 就在Excel中那儿

62
00:03:53,400 --> 00:03:57,420
如果你到工作表 那里，点击它，

63
00:03:57,420 --> 00:04:01,790
如果你点击Python
Shell，你将看到一个类似于计算器的东西，你

64
00:04:01,790 --> 00:04:04,209
可以在其中键入公式，如3 + 5，

65
00:04:04,209 --> 00:04:08,250
就像你可以在Excel中输入公式一样， 但你也可以涉及

66
00:04:08,250 --> 00:04:12,160
电子表格 。 你可以做 像C2 + 5之类的事情，

67
00:04:12,160 --> 00:04:16,959
但你不能像在Excel中这样做C2, 你必须直接调用

68
00:04:16,959 --> 00:04:18,389
它的值。 所以你看，

69
00:04:18,389 --> 00:04:21,910
比方说，给我C2单元格的值，

70
00:04:21,910 --> 00:04:25,090
并加入5。 而且它不只是 读取，

71
00:04:25,090 --> 00:04:25,570
你也可以

72
00:04:25,570 --> 00:04:29,950
直接写入电子表格 ，正如你看到我 在这里做的。
让我们把“你好！”放入

73
00:04:29,950 --> 00:04:33,870
A1里，然后你看到的是改变的不只是 A1，

74
00:04:33,870 --> 00:04:37,600
所有依赖于 它的值也改变了。 所以，你改变了一个值，然后

75
00:04:37,600 --> 00:04:41,540
该电子表格计将把一切重新计算。

76
00:04:41,540 --> 00:04:45,220
但是，让我们赶紧把凯文·培根 重新放回去，否则，我们好好的

77
00:04:45,220 --> 00:04:48,060
培根数计算器就要被搞砸了。

78
00:04:48,060 --> 00:04:51,870
因此，这似乎是一个可以帮助我们的一个很好的解决方案，

79
00:04:51,870 --> 00:04:56,470
要利用Python来解决我们的培根问题 ， 这就是我们要

80
00:04:56,470 --> 00:04:57,690
在接下来的视频里做的事。
