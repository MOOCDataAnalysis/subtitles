1
00:00:00,680 --> 00:00:03,280
Laten we nu kijken hoe we Python 
kunnen gebruiken

2
00:00:03,290 --> 00:00:06,890
om ons Bacon probleem op te lossen. 
Laten we teruggaan naar onze spreadsheet

3
00:00:06,890 --> 00:00:10,870
en laten we naar de mooie deeloplossingen kijken, 
bijvoorbeeld deze eenvoudige VERT.ZOEKEN. 

4
00:00:10,870 --> 00:00:12,280
die is prima.

5
00:00:12,280 --> 00:00:16,070
Hoewel, het is ook een beetje problematisch, 
hij omslaat twee regels en hangt ook af

6
00:00:16,070 --> 00:00:19,310
deze lelijke SOM.ALS in het andere werkblad.

7
00:00:19,310 --> 00:00:23,880
We willen daar vanaf en die vervangen 
met Python.

8
00:00:23,880 --> 00:00:26,650
Dus laten we deze kolom nemen, selecteren

9
00:00:26,650 --> 00:00:31,189
en laten we het terugkopiëren als waarden.
Het is een soort van test, om te checken

10
00:00:31,189 --> 00:00:33,390
of Python exact hetzelfde gaat doen

11
00:00:33,390 --> 00:00:37,700
als de oorspronkelijke formules. Zo we 
gooien dat weg en maken wat ruimte 

12
00:00:37,700 --> 00:00:42,380
voor onze Python code: "Stappen in Python". 

13
00:00:44,629 --> 00:00:46,120
De vraag is nu, wat

14
00:00:46,120 --> 00:00:49,989
gaan we hier doen? Wat gaan we eigelijk
berekenen?

15
00:00:49,989 --> 00:00:52,710
Als we daarover nadenken, wat we gaan   
berekenen is:

16
00:00:52,710 --> 00:00:56,469
Filmsgewijs bekijken of het een acteur
bevat

17
00:00:56,469 --> 00:01:00,250
met een Bacon getal ongelijk aan

18
00:01:00,250 --> 00:01:04,019
een streepje, dus die een
Bacon getal heeft.

19
00:01:04,019 --> 00:01:07,370
En om te bepalen wat we hier in Python
gaan plaatsen,

20
00:01:07,370 --> 00:01:12,300
hebben we onze theoriebril nodig.

21
00:01:12,300 --> 00:01:16,970
Dus laten we naar het blackboard gaan en bekijken
wat we precies aan het berekenen zijn. Dus wat

22
00:01:16,970 --> 00:01:17,830
we graag willen hebben

23
00:01:17,830 --> 00:01:23,250
is een functie zoals SOM, die op basis 
van de naam van de film berekent,

24
00:01:23,250 --> 00:01:26,110
van de lijst met meespelende acteurs, hun

25
00:01:26,110 --> 00:01:29,970
Bacon getallen. Dus wat 

26
00:01:29,970 --> 00:01:33,150
is het type van die functie?

27
00:01:33,150 --> 00:01:36,430
Laten we zeggen, elke stap voor een 
gegeven film,

28
00:01:36,430 --> 00:01:41,860
we stoppen er een film in, en wat we 
eruit krijgen  

29
00:01:41,860 --> 00:01:45,600
is een lijst van Bacon getallen van
die film.

30
00:01:45,600 --> 00:01:48,520
dus bijvoorbeeld, voor 'Crazy Stupid Love'
deze lijst is

31
00:01:48,520 --> 00:01:51,790
1-streepje-streepje [1--], dit zijn de eerste drie

32
00:01:51,790 --> 00:01:54,170
regels momenteel in de spreadsheet. Dus wat 
we

33
00:01:54,170 --> 00:01:56,110
krijgen is een lijst

34
00:01:56,110 --> 00:02:00,920
van dingen. Dus wat staat er in deze lijst?

35
00:02:00,920 --> 00:02:07,120
Het is of een streepje, of het is ongedefinieerd

36
00:02:07,130 --> 00:02:11,350
of het is een waarde.

37
00:02:11,350 --> 00:02:14,180
En herinner je van de vorige types, 

38
00:02:14,190 --> 00:02:16,290
lijsten zijn erg moeilijk om mee te werken

39
00:02:16,290 --> 00:02:20,000
in spreadsheets. Je moet daar array
formules voor gebruiken.

40
00:02:20,000 --> 00:02:24,000
maar in Python zijn lijsten heel makkelijk,
ze zijn één van de ingebouwde types

41
00:02:24,000 --> 00:02:28,170
en zijn erg makkelijk te bewerken. 
Dus zoiets als dit: kan erg gemakkelijk 

42
00:02:28,170 --> 00:02:29,950
gedaan worden in Python.

43
00:02:29,950 --> 00:02:33,200
Als we een lijst hebben, 1-streep-streepje [1--]
wat we moeten 

44
00:02:33,200 --> 00:02:33,970
berekenen

45
00:02:33,970 --> 00:02:40,970
is het Bacon getal van die lijst. Dus 
laten we die functie NextStep noemen,

46
00:02:44,180 --> 00:02:45,600
wat we hier in stoppen

47
00:02:45,600 --> 00:02:49,500
is deze lijst. Dus we stoppen de lijst

48
00:02:49,500 --> 00:02:53,190
met de Bacon getallen van de acteurs erin en 
wat we eruit krijgen

49
00:02:53,190 --> 00:02:58,620
is een waarde. Dus deze dingen gaan we 
programmeren

50
00:02:58,620 --> 00:03:02,819
in Python. Geef me een film en ik geef
je een lijst met de Bacon getallen van

51
00:03:02,819 --> 00:03:04,240
van de meespelende acteurs,

52
00:03:04,240 --> 00:03:07,100
en geef me die lijst en ik geef je het 
Bacon getal van iedereen 

53
00:03:07,100 --> 00:03:11,870
die in die film speelt. Dus we hebben
onze theoriebril niet meer nodig,

54
00:03:11,870 --> 00:03:16,210
laten we teruggaan naar Excel en kijken 
hoe we een functie kunnen maken in Python.

55
00:03:16,210 --> 00:03:19,770
Dus laten we de schil openen, we klikken op
Python Shell

56
00:03:19,770 --> 00:03:24,110
in DataNitro en we kunnen de functie
definiëren.

57
00:03:24,110 --> 00:03:27,630
Dus laten we beginnen met een eenvoudige, 
we zeggen we hebben een functie 'plusone'. 

58
00:03:27,630 --> 00:03:32,500
waar we iets instoppen en het resultaat is 
dat iets

59
00:03:32,500 --> 00:03:36,840
plus één. Dus het lijkt erg op je eigen 
SOM functie maken of je eigen 

60
00:03:36,840 --> 00:03:40,640
MIN functie. We kunnen er iets instoppen,
en we krijgen een resultaat.

61
00:03:40,640 --> 00:03:43,860
Bijvoorbeeld, Als we Python vragen
wat dit is,

62
00:03:43,860 --> 00:03:48,000
weet hij dat plusone een functie is en
als we er iets instoppen, bijvoorbeeld

63
00:03:48,000 --> 00:03:49,480
de plusone van 5

64
00:03:49,480 --> 00:03:53,940
geeft als resultaat 6. Het is misschien cryptisch

65
00:03:53,940 --> 00:03:57,250
maar het idee is dat je je eigen (excel)functie
definieert/ maakt

66
00:03:57,250 --> 00:04:00,940
en je kunt zeggen 'wat wil ik er instoppen? 
Nummer X'.

67
00:04:00,940 --> 00:04:04,080
'En wat krijg ik terug? Nummer X plus één'. 
 
68
00:04:04,080 --> 00:04:06,900
En dit is precies, het maken van functies,

69
00:04:06,900 --> 00:04:10,740
wat we gaan gebruiken om ons
Bacon probleem op te lossen.

70
00:04:10,740 --> 00:04:14,390
Dus laten we een andere shell maken
en laten we kijken naar een andere functie.

71
00:04:14,390 --> 00:04:18,260
En jij weet welke functies, de functies
die we hebben gedefinieerd op het blackboard.

72
00:04:18,260 --> 00:04:22,330
We starten met AllSteps. AllSteps is een
functie die de naam van de 

73
00:04:22,330 --> 00:04:25,470
film nodig heeft en het retourneert 

74
00:04:25,470 --> 00:04:29,160
al de Bacon getallen van alle mensen in 
die film. 

75
00:04:29,160 --> 00:04:33,510
Dus bijvoorbeeld, voor 'Crazy Stupid Love', zal het
restultaat van deze functie zijn: één

76
00:04:33,510 --> 00:04:37,220
en een streepje en een ander streep [1--]. 
Dus we gaan alle regels

77
00:04:37,220 --> 00:04:37,930
doorkruizen

78
00:04:37,930 --> 00:04:42,470
in onze spreadsheet en kijken of we een
overeenkomst hebben voor onze film.

79
00:04:42,470 --> 00:04:45,380
Eerste instantie, als we starten met de eerste 
regel, natuurlijk hebben we geen

80
00:04:45,380 --> 00:04:48,900
overeenkomsten gevonden en dan met de 'for'

81
00:04:48,900 --> 00:04:51,639
syntax functie, dat is een Python ding,

82
00:04:51,639 --> 00:04:55,490
kunnen we alles gebruiken; we kunnen
elke regel adresseren.

83
00:04:55,490 --> 00:04:59,600
Dus we starten op de tweede regel en gaan
tot aan de twaalfde regel

84
00:04:59,600 --> 00:05:02,290
en op elke regel kijken we of 

85
00:05:02,290 --> 00:05:05,470
de waarde van de tweede kolom, dus op

86
00:05:05,470 --> 00:05:08,449
de regel waar we nu zijn, namelijk regel 'i', 
onze hulpvariabele

87
00:05:08,449 --> 00:05:13,300
voor de loop (herhaling), of in de tweede kolom, de 
waarde van die cell, die we  

88
00:05:13,300 --> 00:05:14,440
inspecteren,

89
00:05:14,440 --> 00:05:17,870
gelijk is aan de film die we in onze functie hebben
gestopt. Dus,

90
00:05:17,870 --> 00:05:21,350
dit zou je moeten herinneren aan de SOM.ALS
functie, 

91
00:05:21,350 --> 00:05:24,370
waar we een stel lijnen optellen alleen
als ze overeenkomen met

92
00:05:24,370 --> 00:05:28,850
een zekere waarde. Dus, we nemen een aantal 
waarden samen 

93
00:05:28,850 --> 00:05:33,650
alleen als het overeenkomt met een bepaalde 
waarde. Dus wat voegen we toe aan onze lijst?

94
00:05:33,650 --> 00:05:37,270
Niet de naam van de film, maar de kolom
direct rechts ervan. Dus de 

95
00:05:37,270 --> 00:05:40,960
cell op de regel die we inspecteren in 
de derde kolom.

96
00:05:40,960 --> 00:05:45,010
Als we een overeenkomst hebben, voegen we 
dit toe aan de lijst met onze append functie.

97
00:05:45,010 --> 00:05:49,550
En als we klaar zijn, als we alle regels hebben
geinspecteerd, dan 

98
00:05:49,550 --> 00:05:54,330
geven we een lijst terug met stappen. 
Dus herinner jezelf eraan, 

99
00:05:54,330 --> 00:05:58,130
net zoals bij de plusone, we stoppen een 5 
erin en krijgen een 6 terug. Hier

100
00:05:58,130 --> 00:06:02,729
stoppen we er een filmnaam in en krijgen 
een lijst terug. Dit resultaat kunnen we in  

101
00:06:02,729 --> 00:06:03,869
een variabele stoppen.

102
00:06:04,380 --> 00:06:07,860
Laten we dat proberen voor de film
'Crazy Stupid Love'.

103
00:06:07,870 --> 00:06:12,370
we maken een variabele 'Steps of Crazy
Stupid Love' [StepsCSL]

104
00:06:12,370 --> 00:06:15,150
en wat we in die variabele gaan stoppen 

105
00:06:15,150 --> 00:06:18,360
is het resultaat van onze functie. De Allsteps

106
00:06:18,360 --> 00:06:21,639
toegepast op 'Crazy Stupid Love'. Maar hier
moeten we

107
00:06:21,639 --> 00:06:26,180
quotes [''] toevoegen, omdat het een string, 
een tekstwaarde is.

108
00:06:26,180 --> 00:06:28,180
Dus als we enter drukken, is de waarde

109
00:06:28,180 --> 00:06:32,010
opgeslagen in onze variabele en als
we Python vragen wat er in 

110
00:06:32,010 --> 00:06:35,290
deze variable zit? Dan is het resultaat  
één streepje streepje [1--],

111
00:06:35,290 --> 00:06:38,229
en dat is precies wat we willen, toch?
het resultaat

112
00:06:38,229 --> 00:06:42,240
van 'Crazy Stupid Love' is de lijst [1--]

113
00:06:42,240 --> 00:06:45,400
Dus het eerste deel van ons
probleem is opgelost,

114
00:06:45,400 --> 00:06:48,760
maar het is nog opgelost in de Python wereld,

115
00:06:48,760 --> 00:06:50,580
en we willen de waarde terug hebben in

116
00:06:50,580 --> 00:06:54,479
onze spreadsheetomgeving. Dus als we dat 
doen, we hebben dat eerder gezien, we kunnen

117
00:06:54,479 --> 00:06:55,740
de spreadsheet aanpassen vanuit

118
00:06:55,740 --> 00:06:59,389
Python, kunnen we zeggen: de cell in de 

119
00:06:59,389 --> 00:07:03,240
tweede kolom in de vierde regel. Oeps, het 
spijt me, 

120
00:07:03,240 --> 00:07:07,580
de TWEEDE regel in de VIERDE kolom zou nu
dezelfde waarde moeten hebben als onze 

121
00:07:07,580 --> 00:07:08,430
variabele.

122
00:07:08,430 --> 00:07:13,210
En als we nu enter drukken, dan 
wordt de waarde onmiddelijk geupdate.

123
00:07:13,210 --> 00:07:18,350
En hier zie je dat Python een hele lijst
in één cell kan stoppen.

124
00:07:18,940 --> 00:07:22,440
Als je dat met Excel wilt doen, 
moet je een array formule gebruiken.

125
00:07:22,449 --> 00:07:28,120
Maar we hebben in de vorige videos gezien dat 
Excel niet een array, een lijst

126
00:07:28,120 --> 00:07:32,449
in één cell kan stoppen, je moet het ruimte geven
om al de cellen op te vullen. 

127
00:07:32,449 --> 00:07:35,620
Dat is niet het geval met Python, we 
kunnen gewoon de hele lijst nemen

128
00:07:35,620 --> 00:07:39,199
en het in een cel stoppen. Wat veel
eenvoudiger is, 

129
00:07:39,199 --> 00:07:42,959
als je een hoop lijstoperatie 
gebruikt zoals wij dat doen.

130
00:07:43,630 --> 00:07:47,700
Dus laten we verder gaan met de 
tweede helft van ons probleem. Ik heb

131
00:07:47,710 --> 00:07:50,289
de shell leeggemaakt, hoewel, we kunnen nog

132
00:07:50,289 --> 00:07:53,400
steeds al de functies zien die er zijn. 
Python herinnert ze,

133
00:07:53,400 --> 00:07:57,500
dus we hebben nog steeds de AllSteps functie
en we gaan een stap maken met een nieuwe.

134
00:07:57,500 --> 00:08:01,310
We gaan een functie NextStep maken.
Zoals we zagen op het blackboard, dit is 

135
00:08:01,310 --> 00:08:03,120
een functie dat een lijst inneemt

136
00:08:03,120 --> 00:08:06,350
die we hebben gemaakt en we geven 

137
00:08:06,350 --> 00:08:10,259
de volgende waarde terug. We gaan 
door alle stappen,

138
00:08:10,259 --> 00:08:13,440
[1--] in dit geval, net zoals we 

139
00:08:13,440 --> 00:08:16,440
de rijen in ons vorige voorbeeld hebben doorkruist.

140
00:08:16,440 --> 00:08:21,470
Dus we gebruiken weer 'for', een Python 
constructie dat we gebruiken voor herhaling,

141
00:08:21,470 --> 00:08:24,919
en we gaan alle elementen in onze lijst
inspecteren.

142
00:08:24,919 --> 00:08:28,639
Dus als je iets ziet dat niet een streepje is,
bijvoorbeeld een één,

143
00:08:28,639 --> 00:08:32,589
dan weten we wat het resultaat is, toch? 
Dan zal het resultaat de waarde zijn plus één.

144
00:08:32,589 --> 00:08:35,300
Dus als we iets zien 

145
00:08:35,300 --> 00:08:39,189
ongelijk aan, dat is de uitroepteken syntax,

146
00:08:39,189 --> 00:08:42,829
dan weten we dat we een plus één moeten teruggeven.

147
00:08:42,829 --> 00:08:44,839
Maar, wat als een streepje zien?

148
00:08:44,839 --> 00:08:47,720
Dan weten we niet wat we moeten teruggeven, 
omdat de volgende regel een 

149
00:08:47,720 --> 00:08:51,959
streepje of een één kan zijn. Dus als 
we een streepje zien, dat weten we nog

150
00:08:51,959 --> 00:08:52,949
niet,

151
00:08:52,949 --> 00:08:56,040
maar, als je alleen maar streepjes hebt 
gezien en je hebt nog niets anders 

152
00:08:56,040 --> 00:08:58,679
teruggegeven, dan gaan we teruggeven

153
00:08:58,679 --> 00:09:00,790
een streepje, omdat dat precies aangeeft wat

154
00:09:00,790 --> 00:09:01,610
we willen. 

155
00:09:01,610 --> 00:09:04,670
Als alles een streepje teruggeeft, dan is 
het een streepje.

156
00:09:04,670 --> 00:09:09,679
Dus als we een functie hebben, dat is gedefinieerd, 
en we hebben nog steeds onze variabele, [1--]

157
00:09:09,679 --> 00:09:12,499
die we in onze vorige slide hebben gemaakt.
Dus 

158
00:09:12,499 --> 00:09:14,569
nu kunnen we dat gebruiken, we kunnen deze

159
00:09:14,569 --> 00:09:15,860
functie aanroepen

160
00:09:15,860 --> 00:09:19,660
voor de variabele en het werkt als volgt:

161
00:09:19,660 --> 00:09:22,839
zoals plusone, we stoppen hier
de variabele erin

162
00:09:22,839 --> 00:09:27,829
en vinden het resultaat. Dus een lijst 
erin, geeft als resultaat twee, dat is 

163
00:09:27,829 --> 00:09:29,589
precies wat we willen

164
00:09:29,589 --> 00:09:33,740
Als we een film hebben met drie acteurs, 
één is Kevin Bacon

165
00:09:33,740 --> 00:09:38,089
en de andere twee hebben een ongedefinieerd
Bacon getal, dan geeft deze film 

166
00:09:38,089 --> 00:09:39,170
het Bacon getal van

167
00:09:39,170 --> 00:09:42,150
2 aan iedereen die erin gespeeld heeft.

168
00:09:43,860 --> 00:09:49,399
Tot zover hebben we alleen de Python schil
gebruikt

169
00:09:49,399 --> 00:09:52,720
maar we kunnen ook de editor
gebruiken.

170
00:09:52,720 --> 00:09:56,980
dan hoeven we niet de functie in te typen
in dit kleine rare lijngevalletje,

171
00:09:56,980 --> 00:10:02,569
we kunnen ze gewoon in een tekstbestand
typen en opslaan, net zoals je een spreadsheet opslaat.

172
00:10:02,569 --> 00:10:07,059
Je kunt dan ook alle Pythonbestanden opslaan
en dat is natuurlijk veel makkelijker

173
00:10:07,059 --> 00:10:10,100
dan ze invoeren, omdat als je de shell 
afsluit,

174
00:10:10,100 --> 00:10:14,679
al jouw functies weg zijn. Dus nu stoppen 
we alle

175
00:10:14,679 --> 00:10:18,589
functiedefinities in een bestand.

176
00:10:18,589 --> 00:10:23,019
En van dat bestand draaien we en stoppen
we het terug in onze spreadsheet.

177
00:10:23,019 --> 00:10:26,170
Dus opnieuw, we gebruiken een 'for loop'

178
00:10:26,170 --> 00:10:28,399
en we gaan alle regels

179
00:10:28,399 --> 00:10:33,019
printen, om het makkelijk te maken, gaan we
gewoon het rijnummer printen.

180
00:10:33,019 --> 00:10:37,509
Zodat je kunt zien hoe dat gaat. We zeggen
dat de waarde van 'i'

181
00:10:37,509 --> 00:10:40,670
en 4 gewoon 'i' wordt.

182
00:10:40,670 --> 00:10:44,449
Dus als we dat maken, slaan we het bestand 
op en drukken 'run', 

183
00:10:44,449 --> 00:10:48,369
*whoop* je ziet het, één handeling

184
00:10:48,369 --> 00:10:51,689
al de 'i's zijn daar, maar ik heb een fout gemaakt,

185
00:10:51,689 --> 00:10:55,319
Ik gebruikte "tot 12" de hele tijd 
en ik vergat dat 

186
00:10:55,319 --> 00:10:59,919
het is "tot aan 12" en niet "tot en inclusief 12". 
Dus, dit moet eigelijk zijn

187
00:10:59,920 --> 00:11:02,019
13 en dat heeft deze functie.

188
00:11:02,019 --> 00:11:05,269
Dus, nu zijn we tot 13 gegaan en je ziet, al 
de 

189
00:11:05,269 --> 00:11:06,769
regels zijn gevuld.

190
00:11:06,769 --> 00:11:09,850
Maar, natuurlijk, we willen niet die 'i' daar, 
we willen graag 

191
00:11:09,850 --> 00:11:13,709
het resultaat van die twee functies hebben, 
die we net hebben gemaakt.

192
00:11:13,709 --> 00:11:17,660
Dus laten we opnieuw starten met AllSteps, 
en laten we

193
00:11:17,660 --> 00:11:21,509
de waarde van de tweede kolom nemen.

194
00:11:21,509 --> 00:11:25,050
Dus we hebben de films, dat is de eerste
stap die we moeten maken,

195
00:11:25,050 --> 00:11:28,189
omdat we onze filmnaam in  

196
00:11:28,189 --> 00:11:33,189
de AllSteps functie stoppen. Dus hier gaan 
we, AllSteps.


197
00:11:33,189 --> 00:11:38,279
Hier, we gebruiken geen string meer, 
maar we krijgen een waarde van de spreadsheet.

198
00:11:38,279 --> 00:11:41,319
Het is mooi, toch? So nu hebben we voor elke film

199
00:11:41,319 --> 00:11:45,889
een lijst van alle acteurs die erin zitten 
en we moeten die lijst stoppen

200
00:11:45,889 --> 00:11:47,160
in de NextStep

201
00:11:47,160 --> 00:11:50,879
functie. Daar gaan we, we stoppen het in 
de lijst,

202
00:11:50,879 --> 00:11:53,730
nu drukken we 'run'.  Kijk eens aan!

203
00:11:53,730 --> 00:11:58,049
Het resultaat is precies hetzelfde
als het resultaat dat we hadden gevonden

204
00:11:58,049 --> 00:12:02,209
met al de VERT.ZOEKEN en al de SOM.ALS 
maar in plaats van een

205
00:12:02,209 --> 00:12:05,869
hoop formules te gebruiken, hebben 
we gewoon een kleine beetje code gebruikt

206
00:12:05,869 --> 00:12:09,439
om onze waarden te berekenen. Waarom is
deze code 

207
00:12:09,439 --> 00:12:13,429
belangrijker dan VERT.ZOEKEN? 
Omdat we constructies gebruiken als

208
00:12:13,429 --> 00:12:18,969
een lijst en een loop die niet inheems, 
niet standaard in spreadsheet zitten.

209
00:12:18,969 --> 00:12:23,160
Dit zijn zeer gebruikelijke constructies
binnen het programmeren, hoewel, als je iets

210
00:12:23,160 --> 00:12:24,089
anders wilt doen, zoals

211
00:12:24,089 --> 00:12:29,009
alle lijnen van mijn spreadsheet inspecteren
en iets doen bij een speciaal geval, 

212
00:12:29,009 --> 00:12:32,779
dan zijn spreadsheets daar niet geschikt voor. 
Die zijn gemaakt voor berekeningen

213
00:12:32,779 --> 00:12:36,910
en niet echt voor constant waarden inspecteren 
en veranderen.

214
00:12:36,910 --> 00:12:41,910
Dus voor deze scenarios zijn
programmeertalen gewoon een 

215
00:12:41,910 --> 00:12:43,910
beetje makkelijker.

216
00:12:45,520 --> 00:12:48,799
Dus wat we kunnen doen,
we kunnen dit weggooien,

217
00:12:48,799 --> 00:12:53,379
we hebben deze lelijke SOM.ALS
niet meer nodig. We kunnen ze 

218
00:12:53,380 --> 00:12:58,470
selecteren en we zijn er klaar mee, ga weg, 
we willen jullie niet meer zien. En hier, 

219
00:12:58,470 --> 00:13:02,829
merk op dat we de VERT.ZOEKEN stiekem
hebben teruggestopt terwijl je niet keek,

220
00:13:02,829 --> 00:13:07,149
gewoon om het je nog één keer te laten zien, 
voordat we die ook weggooien. Dus we hebben 

221
00:13:07,149 --> 00:13:10,799
deze waarden niet meer nodig. Maar we hoeven 
niet al die formules weg te gooien

222
00:13:10,799 --> 00:13:14,509
sommigen zijn nog steeds prima, 

223
00:13:14,509 --> 00:13:17,649
de VERT.ZOEKEN bijvoorbeeld, die we als 
eerste gebruikten, 

224
00:13:17,649 --> 00:13:21,009
is prima, het is een eenvoudige functie, 
je kunt die gebruiken. 

225
00:13:21,009 --> 00:13:24,869
Maar sommige delen, de lelijke delen, die
hebben we verwijderd

226
00:13:24,869 --> 00:13:28,629
en vervangen met dit soort Python code.

227
00:13:28,629 --> 00:13:31,689
en je ziet, in deze video deed ik alleen de 
tweede stap, 

228
00:13:31,689 --> 00:13:36,129
dus jouw uitdaging voor deze week is om de 
rest van dit Python programma uit te bouwen

229
00:13:36,129 --> 00:13:40,019
zodat het niet alleen werkt voor twee stappen, 
maar dat het werkt voor een 

230
00:13:40,019 --> 00:13:44,529
ongelimiteerd aantal stappen, of laten we 
zeggen tenminste 12 stappen, omdat dat het

231
00:13:44,529 --> 00:13:46,529
hoogste Bacon getal is hier.

232
00:13:46,529 --> 00:13:49,609
Dus succes met je huiswerk en tot 
volgende week!

