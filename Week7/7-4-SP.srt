1
00:00:00,680 --> 00:00:03,280
Entonces, vamos a ver como usar Python

2
00:00:03,290 --> 00:00:06,890
para resolver nuestro ejemplo Bacon. Volvamos
a nuestra hoja de cálculo

3
00:00:06,890 --> 00:00:10,870
y vamos a echar un vistazo a las partes
que nos gustan., como este simple VLOOKUP. 

4
00:00:10,870 --> 00:00:12,280
está bastante bien.

5
00:00:12,280 --> 00:00:16,070
Sin embargo, este es problemático, tiene dos
líneas también depende de estos 

6
00:00:16,070 --> 00:00:19,310
feos SUMIFs en la otra hoja de trabajo.

7
00:00:19,310 --> 00:00:23,880
Por lo tanto, queremos deshacernos de ello
y reemplazarlo con Python.

8
00:00:23,880 --> 00:00:26,650
Así que vamos a seleccionar esta columna, 

9
00:00:26,650 --> 00:00:31,189
y la copiamos denuevo como valores.
Esto es como un test, por lo que 

10
00:00:31,189 --> 00:00:33,390
podemos ver si nuestro Python hará exactamente
lo mismo que 

11
00:00:33,390 --> 00:00:37,700
las fórmulas originales. Elimimamos
esto y hacemos sitio

12
00:00:37,700 --> 00:00:42,380
para nuestro código Python: "Steps in Python".

13
00:00:44,629 --> 00:00:46,120  
La cuestión ahora es,

14
00:00:46,120 --> 00:00:49,989
¿qué vamos a hacer ahora aquí? ¿Que
estamos calculando actualmente?

15
00:00:49,989 --> 00:00:52,710
Si pensamos acerca de ello, lo que estamos
calculando aquí es:

16
00:00:52,710 --> 00:00:56,469
cada una de estas películas de aquí, 
tiene un actor,

17
00:00:56,469 --> 00:01:00,250
que tiene un número Bacon que es igual a

18
00:01:00,250 --> 00:01:04,019
un guión, este otro, tiene un número
de Bacon definido.

19
00:01:04,019 --> 00:01:07,370
Y para que podamos averiguar qué poner 
allí en Python,

20
00:01:07,370 --> 00:01:12,300
vamos a necesitar la teoría de las lentes.

21
00:01:12,300 --> 00:01:16,970
Así que vamos a ir a la pizarra para echar un vistazo 
a lo que exactamente estamos calculando. 

22
00:01:16,970 --> 00:01:17,830
Así que lo que nos gustaría tener

23
00:01:17,830 --> 00:01:23,250
es una función como SUM, que calcula,
basándose en el título de la película,

24
00:01:23,250 --> 00:01:26,110
la lista de actores que participan en ella,

25
00:01:26,110 --> 00:01:29,970
sus números Bacon. Pero, ¿cual

26
00:01:29,970 --> 00:01:33,150
es el tipo de esta función?

27
00:01:33,150 --> 00:01:36,430
Así que sigamos que todos los pasos para una 
película determinada,

28
00:01:36,430 --> 00:01:41,860
pongo una película, y lo que 
quiero retornar

29
00:01:41,860 --> 00:01:45,600
es una lista de números Bacon 
para esta película.

30
00:01:45,600 --> 00:01:48,520
Por ejemplo, para  'Crazy Stupid Love'
la lista podría ser

31
00:01:48,520 --> 00:01:51,790
uno-guión-guión-1, estas son 
las tres primeras filas que están

32
00:01:51,790 --> 00:01:54,170
actualmente en la hoja de datos.
Así que hemos conseguido

33
00:01:54,170 --> 00:01:56,110
una lista de cosas.

34
00:01:56,110 --> 00:02:00,920
Pero, ¿Qué está en esta lista? 

35
00:02:00,920 --> 00:02:07,120
Es un guión, o es indefinido

36
00:02:07,130 --> 00:02:11,350
o podrá ser un valor.

37
00:02:11,350 --> 00:02:14,180
Y si te acuerdas de los tipos anteriores,

38
00:02:14,190 --> 00:02:16,290
las listas son bastante díficiles para 
trabajar con ellas en las hojas 

39
00:02:16,290 --> 00:02:20,000
de cálculo. Para esto tenemos que usar
fómulas de matriz.

40
00:02:20,000 --> 00:02:24,000
Sin embargo, en Python las listas son muy 
fáciles, son uno de los tipos incorporados

41
00:02:24,000 --> 00:02:28,170
y son muy fáciles de manejar. Por esto, 
algo como esto, será realizado 

42
00:02:28,170 --> 00:02:29,950
fácilmente en Python.

43
00:02:29,950 --> 00:02:33,200
Si tenemos esta lista, uno-guión-guión-{1--],
lo que necesitamos para

44
00:02:33,200 --> 00:02:33,970
calcular

45
00:02:33,970 --> 00:02:40,970
es el número Bacon de esta lista. 
Vamos a llamar a esta función NextStep.

46
00:02:44,180 --> 00:02:45,600
dentro de ella ponemos esta lista

47
00:02:45,600 --> 00:02:49,500
Ponemos la lista de los números

48
00:02:49,500 --> 00:02:53,190
Bacon de los actores y lo que devuelve
es un valor

49
00:02:53,190 --> 00:02:58,620
Así que, estas son las cosas que vamos a 
programar en Python

50
00:02:58,620 --> 00:03:02,819
Dame una película y yo te daré la lista de 
los números Bacon de

51
00:03:02,819 --> 00:03:04,240
los actores que trabajan en ella,

52
00:03:04,240 --> 00:03:07,100
y dame esta lista y yo te daré
el número Bacon de 

53
00:03:07,100 --> 00:03:11,870
todos lso que están en esta película. Así
que, ya no necesito mas tiempo la teoría 
de las lentes, 

54
00:03:11,870 --> 00:03:16,210
Volvamos atrás, a Excel y hechemos un vistazo
a cómo trabaja la definición de funciones

55
00:03:16,210 --> 00:03:19,770
en Python. Así que vamos a activar la shell,
click en Python Shell

56
00:03:19,770 --> 00:03:24,110
en DataNitro y ahora podemos definir 
funciones.

57
00:03:24,110 --> 00:03:27,630
Así que vamos a empezar con una fácil, decimos 
que queremos tener la función 'plusone',

58
00:03:27,630 --> 00:03:32,500
dentro de ella, ponemos algo, y el resultado
es algo más uno.

59
00:03:32,500 --> 00:03:36,840
Así que esto es muy parecido a la definición de 
nuestra propia función SUM o nuestra propia 

60
00:03:36,840 --> 00:03:40,640
función MIN. Podemos poner algo en ellas, y 
obtenemos un resultado.

61
00:03:40,640 --> 00:03:43,860
Por ejemplo, en este momento, si le preguntamos
a Python qué es esto, 

62
00:03:43,860 --> 00:03:48,000
Python sabe que plusone es una función y
si ponemos algo en su interior, por ejemplo

63
00:03:48,000 --> 00:03:49,480
devolver plusone + 5

64
00:03:49,480 --> 00:03:53,940
el resultado es 6. Tal vez esto sea 
un poco críptico, 

65
00:03:53,940 --> 00:03:57,250
pero la idea es que, si definimos 
nuestras propias funciónes

66
00:03:57,250 --> 00:04:00,940
y podemos decir ¿qué debo tener dentro?
El número X.

67
00:04:00,940 --> 00:04:04,080
Y ¿qué devuelvo? El número X más uno.

68
00:04:04,080 --> 00:04:06,900
Y esto es exactamente lo mismo, 
la definición de funciones, 

69
00:04:06,900 --> 00:04:10,740
que vamos a usar  para hacer frente
al problema Bacon.

70
00:04:10,740 --> 00:04:14,390
Así que volvemos a ejecutar la shell y 
vamos
 a construir otra función.

71
00:04:14,390 --> 00:04:18,260
Y usted sabe qué función, las función es
la que definimos en la pizarra. 

72
00:04:18,260 --> 00:04:22,330
Empezaremos con AllSteps. AllSteps es una
función que toma el nombre

73
00:04:22,330 --> 00:04:25,470
de una película y devuelve

74
00:04:25,470 --> 00:04:29,160
todos los números Bacon de personas en esta 
película.

75
00:04:29,160 --> 00:04:33,510
Por ejemplo, para  'Crazy Stupid Love' el
resultado de esta función podría ser uno

76
00:04:33,510 --> 00:04:37,220
y guión y otro guión [1--]. Así que vamos a 

77
00:04:37,220 --> 00:04:37,930
atravesar todas las líneas de

78
00:04:37,930 --> 00:04:42,470
nuestra hoja de cálculo y ver si tenemos una 
 
coincidencia para nuestra película.

79
00:04:42,470 --> 00:04:45,380
Inicialmente, si empezamos por la primera línea
,
de hecho no encontramos ninguna

80
00:04:45,380 --> 00:04:48,900
coincidencia y entonces, con la 
síntasis de la función "for"
,

81
00:04:48,900 --> 00:04:51,639
eEsto es una cosa de Python, 

82
00:04:51,639 --> 00:04:55,490
podemos utilizarlo todo;  podemos abordar
cada línea.

83
00:04:55,490 --> 00:04:59,600
Así que comenzamos en la segunda línea y
vamos hasta la número 12

84
00:04:59,600 --> 00:05:02,290
y en cada una de estas líneas, vamos
a mirar el valor

85
00:05:02,290 --> 00:05:05,470
el valor en la segunda columna, 
así que, 

86
00:05:05,470 --> 00:05:08,449
la fila en la que estamos es "i", 
variable de iteración 

87
00:05:08,449 --> 00:05:13,300
para el bucle. En  la segunda columna, está el
valor de esa cosa que estamos

88
00:05:13,300 --> 00:05:14,440
inspeccionando

89
00:05:14,440 --> 00:05:17,870
igual a la película que hemos puesto en 
nuestra función. Luego

90
00:05:17,870 --> 00:05:21,350
esto debe recordarnos la función SUMIF,

91
00:05:21,350 --> 00:05:24,370
en la que solamente sumamos un montón
de líneas,
 si coincide un cierto valor.

92
00:05:24,370 --> 00:05:28,850
Bien, aquí estamos abarcando un 
montón de valores juntos

93
00:05:28,850 --> 00:05:33,650
solamente si coinciden con cierto valor.
¿Que estamos añadiendo a nuestra lista?

94
00:05:33,650 --> 00:05:37,270
No es el título de la película, pero sí
la columna adyacente a él, luego 

95
00:05:37,270 --> 00:05:40,960
la celda en la fila que estamos inspeccionado
en la tercera columna.

96
00:05:40,960 --> 00:05:45,010
Si tenemos una coincidencia, añadimos esto
a nuestra lista con la función append.

97
00:05:45,010 --> 00:05:49,550
Y si hemos terminado, si todas las filas han
sido inspeccionadas, entonces
 nos

98
00:05:49,550 --> 00:05:54,330
devuelve la lista Steps. 
Así que,
 recordando,

99
00:05:54,330 --> 00:05:58,130
como en el plusone,  cuando poníamos cinco
 dentro y
 nos devolvía seis, ahora, 

100
00:05:58,130 --> 00:06:02,729
ponemos dentro una película y nos devuelve 
una lista. A continuación Luego, podemos 

101
00:06:02,729 --> 00:06:03,869
poner el resultado 
de esto en una variable. 

102
00:06:04,380 --> 00:06:07,860
Probemos esto. Para la película 
'Crazy Stupid Love'

103
00:06:07,870 --> 00:06:12,370
creamos unala variable llamada Steps of
Crazy Stupid Love [StepsCSL]

104
00:06:12,370 --> 00:06:15,150
y lo que vamos a poner en esta 
variable

105
00:06:15,150 --> 00:06:18,360
es rel  esultado de nuestra función.
La AllSteps

106
00:06:18,360 --> 00:06:21,639
aplicada  en 'Crazy Stupid Love'. 
Pero aquí deberíamos

107
00:06:21,639 --> 00:06:26,180
añadir comillas ["], porque es una cadena, 
de texto.

108
00:06:26,180 --> 00:06:28,180
Pulsamos enter y ahora el valor es

109
00:06:28,180 --> 00:06:32,010
guardado en nuestra variable. ¿Y si 
ahora le pedimos a Python lo que está en 

110
00:06:32,010 --> 00:06:35,290
esa variable? El resultado será 
uno-guión-guión [1--],

111
00:06:35,290 --> 00:06:38,229
y esto es exactamente lo que queríamos, 
¿de acuerdo? El resultado de 

112
00:06:38,229 --> 00:06:42,240
'Crazy Stupid Love' es la lista 
uno guión guión  [1--].

113
00:06:42,240 --> 00:06:45,400
Por tanto, la primera parte de nuestro 
problema está resuelta, 

114
00:06:45,400 --> 00:06:48,760
pero aún así está resuelta en el mundo 
de Python,

115
00:06:48,760 --> 00:06:50,580
y nos gustaría tener este valor de nuevo

116
00:06:50,580 --> 00:06:54,479
en el mundo de la hoja de cálculo. Podemos
hacer esto, lo hemos visto antes, podemos editar

117
00:06:54,479 --> 00:06:55,740
la hoja de cálculo, desde Python,

118
00:06:55,740 --> 00:06:59,389
podemos decir: la celda en la 

119
00:06:59,389 --> 00:07:03,240
segunda columna de la cuarta línea. 
Oops, Lo siento,

120
00:07:03,240 --> 00:07:07,580
segunda fila en la cuarta columna debería
ser el valor que tenemos en nuestra

121
00:07:07,580 --> 00:07:08,430
variable.

122
00:07:08,430 --> 00:07:13,210
Si ahora pulsamos enter, inmediatamente
el valor se actualiza.


123
00:07:13,210 --> 00:07:18,350
Como ves, Python puede colocar
una lista entera en una celda.

124
00:07:18,940 --> 00:07:22,440
Para hacer esto en Excel necesitamos 
utilizar fórmulas de matriz

125
00:07:22,449 --> 00:07:28,120
como hemos visto en los vídeos de semanas
anteriores. Excel no puede poner una matriz,


126
00:07:28,120 --> 00:07:32,449
una lista
  una celda, tenemso que darle espacio 
para
 llenar todas las celdas.

127
00:07:32,449 --> 00:07:35,620
Este no es el caso de Python, con él, 
podemos tomar una lista completa

128
00:07:35,620 --> 00:07:39,199
y ponerla en una celda. Lo cual es mucho 
más 
 adecuado

129
00:07:39,199 --> 00:07:42,959
si está realizando una gran cantidad de 
operaciones de listas, como nosotros lo estamos.


130
00:07:43,630 --> 00:07:47,700
Vamos a continuar con la segunda mitad
de nuestro problema. Ahora he limpiado

131
00:07:47,710 --> 00:07:50,289
la shell, no obstante, todavía podemos ver

132
00:07:50,289 --> 00:07:53,400
todas las funciones que están allí.
Python las ha recordado,

133
00:07:53,400 --> 00:07:57,500
Así que todavía tenemos la función  AllSteps 
y vamos a definir una nfunción nueva.

134
00:07:57,500 --> 00:08:01,310
Vamos a definir la función  NextStep.
Como hemos visto en la pizarra, esta es

135
00:08:01,310 --> 00:08:03,120
una función que toma una lista

136
00:08:03,120 --> 00:08:06,350
que acabamos de crear y devuelve

137
00:08:06,350 --> 00:08:10,259
el valor siguiente. Así que vamos 
a recorrer steps,

138
00:08:10,259 --> 00:08:13,440
uno guión guión en este caso, de la 
misma manera que hicimos para 

139
00:08:13,440 --> 00:08:16,440
atravesar las filas en el ejemplo
anterior.

140
00:08:16,440 --> 00:08:21,470
Usamos nuevamente "for", Una construcción Python
utilizada en los bucles, 

141
00:08:21,470 --> 00:08:24,919
y estamos inspeccionando todos los elementos 
de nuestra lista steps.

142
00:08:24,919 --> 00:08:28,639
Luego, si  vemos algo que no sea un guión,
algo como un uno, 

143
00:08:28,639 --> 00:08:32,589
sabemos cual será el resultado, ¿de cuerdo?.
El resultado deberá ser ese valor

144
00:08:32,589 --> 00:08:35,300
más uno. De otro modo, si vemos 
algo

145
00:08:35,300 --> 00:08:39,189
diferente a esto, este es el signo de 
exclamación, 

146
00:08:39,189 --> 00:08:42,829
entonces sabemos que tenemos que retornar
más uno.

147
00:08:42,829 --> 00:08:44,839
pero, ¿y si vemos un guión?

148
00:08:44,839 --> 00:08:47,720
No sabemos qué retornar, porque la siguiente fila


149
00:08:47,720 --> 00:08:51,959
podría ser un guión o podría ser un uno.
Aí que, si vemos un guión, todavía

150
00:08:51,959 --> 00:08:52,949
no lo sabemos,

151
00:08:52,949 --> 00:08:56,040
sin embargo, si sólo hemos visto guiones 
y todavía no hemos devuelto nada

152
00:08:56,040 --> 00:08:58,679
en este caso, vamos a retornar

153
00:08:58,679 --> 00:09:00,790
un guión, porque esto expresa
exactamente 

154
00:09:00,790 --> 00:09:01,610
lo que queríamos.

155
00:09:01,610 --> 00:09:04,670
Si todo son guiones el resultado será 
un guión. 

156
00:09:04,670 --> 00:09:09,679
Así que tenemos una función, está definida, 
y todavía tenemos nuestra variable, un guión

157
00:09:09,679 --> 00:09:12,499
guión [1--], que hemos hecho en una diapositiva
anterior. 
Es por esto que, 

158
00:09:12,499 --> 00:09:14,569
ahora podemos usar esto, podemos 
llamar 

159
00:09:14,569 --> 00:09:15,860
a esta función

160
00:09:15,860 --> 00:09:19,660
en la variable y esto va así:

161
00:09:19,660 --> 00:09:22,839
como plusone, ponemos la variable
dentro

162
00:09:22,839 --> 00:09:27,829
y conseguimos el resultado. Luego, 
si ponemos esta dentro, el resultado es 2

163
00:09:27,829 --> 00:09:29,589
que es exactamente lo que queríamos.

164
00:09:29,589 --> 00:09:33,740
Si tenemso una película con ters actores,
uno de ellos Kevin Bacon

165
00:09:33,740 --> 00:09:38,089
y los otros dos con un número Bacon indefinido,
esta película asignará 

166
00:09:38,089 --> 00:09:39,170
el número Bacon 2 

167
00:09:39,170 --> 00:09:42,150
a todos los que trabajen en ella.

168
00:09:43,860 --> 00:09:49,399
Hasta este momento, hemos estado utilzando 
solamente la opción de la shell de Python

169
00:09:49,399 --> 00:09:52,720
pero también podemos usar el editor
de Python para hacer esto.

170
00:09:52,720 --> 00:09:56,980
En este caso, no tendremos que escribir
las funciones en la pequeña línea, 

171
00:09:56,980 --> 00:10:02,569
podemos escribir en un archivo de texto y guardalo, 
al igual que grabamos una hoja de cálculo.

172
00:10:02,569 --> 00:10:07,059
También podemos guardar estos archivos python
y eso es por supuesto mucho más fácil

173
00:10:07,059 --> 00:10:10,100
que escribir en ellos, porque una vez 
que haya cerrado la shell

174
00:10:10,100 --> 00:10:14,679
todas las funciones que hayas definido
se pierden. Así que lo ponemos todo, 

175
00:10:14,679 --> 00:10:18,589
la misma definición de función, 
en un archivo.

176
00:10:18,589 --> 00:10:23,019
Y a partir de ese archivo podemos ejecutarlo 
y ponerlo de  nuevo en la hoja de cálculo.

177
00:10:23,019 --> 00:10:26,170
Así que, una vez más, vamos a usar 
un bucle for

178
00:10:26,170 --> 00:10:28,399
y en todas las líneas que vamos a
imprimir, 

179
00:10:28,399 --> 00:10:33,019
para hacerlo más fácil, vamos a
imprimir el número de fila.

180
00:10:33,019 --> 00:10:37,509
Sólo para que se vea cómo va. 
Decimos, el valor de "i"

181
00:10:37,509 --> 00:10:40,670
y 4 va a ser simplemente "i".

182
00:10:40,670 --> 00:10:44,449
Si hacemos esto, hemos grabado el archivo
y pulsamos run, 

183
00:10:44,449 --> 00:10:48,369
vemos de una vez, 

184
00:10:48,369 --> 00:10:51,689
todas que las "i's" está ahí, pero he 
cometido un error, 

185
00:10:51,689 --> 00:10:55,319
Estuve usando "hasta 12" todo el tiempo 
y olvidé que

186
00:10:55,319 --> 00:10:59,919
es "hasta 12" y no "hasta e incluyendo 12". 
Por ello, esto deberá ser actualmente

187
00:10:59,920 --> 00:11:02,019
13 así tengo la función.

188
00:11:02,019 --> 00:11:05,269
Ahora hemos ido hasta la 13 y vemos que

189
00:11:05,269 --> 00:11:06,769
todas las filas están llenas.

190
00:11:06,769 --> 00:11:09,850
Pero, de hecho, no queremos esta "i" ahí,
lo que desearíamos tener es

191
00:11:09,850 --> 00:11:13,709
el resultado de esas dos funciones
que hemos definido hace un momento.

192
00:11:13,709 --> 00:11:17,660
Así que vamos a empezar con AllSteps otra vez,
así que tomamos el valor

193
00:11:17,660 --> 00:11:21,509
de la segunda columna.

194
00:11:21,509 --> 00:11:25,050
Ahora tenemos las películas, esto es lo
primero que necesitamos, 

195
00:11:25,050 --> 00:11:28,189
porque el nombre de la película es lo
que vamos a poner dentro 

196
00:11:28,189 --> 00:11:33,189
de la función AllSteps. Así que, ahí vamos,
AllSteps.

197
00:11:33,189 --> 00:11:38,279
dentro de ella, no vamos a usar una cadena más,
pero obtenemos el valor de la hoja de cálculo.

198
00:11:38,279 --> 00:11:41,319
Es bueno ¿no? Así que ahora por cada película

199
00:11:41,319 --> 00:11:45,889
tenemos una lista de todos los actores que
están en ella, y solo tenemos que poner esta lista

200
00:11:45,889 --> 00:11:47,160
dentro de la función NextStep

201
00:11:47,160 --> 00:11:50,879
Ahí vamos, ponemos en la lista

202
00:11:50,879 --> 00:11:53,730
ahora pulsamos run. 
 ¡Mira eso!

203
00:11:53,730 --> 00:11:58,049
el resultado es exactamente el mismo que
el resultado que hemos obtenido

204
00:11:58,049 --> 00:12:02,209
con todos los VLOOKUP's y las SUMIF's,
pero en lugar de usar

205
00:12:02,209 --> 00:12:05,869
un montón de fórmulas, solamente 
usamos un poco de código

206
00:12:05,869 --> 00:12:09,439
para calcular los valores. ¿Por qué
es este código

207
00:12:09,439 --> 00:12:13,429
más sencillo que VLOOKUP? Porque 
usamos construcciones como

208
00:12:13,429 --> 00:12:18,969
una lista y un bucle que no son 
no son naturales de las hojas de cálculo.

209
00:12:18,969 --> 00:12:23,160
Estos son los contratos que son muy comunes
en la programación, sin embargo, si usted quiere hacer 

210
00:12:23,160 --> 00:12:24,089
algo cómo

211
00:12:24,089 --> 00:12:29,009
todas las líeas de mi hoja de cálculo
y hacer algo en un determinado caso,

212
00:12:29,009 --> 00:12:32,779
esto no es algo para lo que estén hechas las 
hojas de cálculo,  Ellas realmente no están hechas 

213
00:12:32,779 --> 00:12:36,910
para inspeccionar valores
 y cambiarlos
contínuamente a continuación 

214
00:12:36,910 --> 00:12:41,910
Así que, estos son escenarios
en los que los lenguajes de  programación

215
00:12:41,910 --> 00:12:43,910
son un poco más fáciles.. 

216
00:12:45,520 --> 00:12:48,799
Entonces, lo que podemos hacer ahora es, 
podemos deshacernos de esos,

217
00:12:48,799 --> 00:12:53,379
No  necesitamos más esos feos SUMIFs.
Podemos selecionarlos

218
00:12:53,380 --> 00:12:58,470
y hemos terminado con ellos, desaparecen,
no los quiero ver nunca más, Y aquí, 

219
00:12:58,470 --> 00:13:02,829
noto cómo he puesto de nuevo las VLOOKUPs, 
en secreto, mientras no estabas buscando,

220
00:13:02,829 --> 00:13:07,149
sólo para mostrartela una vez más, antes de 
deshacemos de ella. Así que no necesitamos

221
00:13:07,149 --> 00:13:10,799
estos valores nunca más. Pero 
no necesitamos eliminar todas las 

222
00:13:10,799 --> 00:13:14,509
fórmulas, algunas de ellas todavía están 
muy bien,

223
00:13:14,509 --> 00:13:17,649
La VLOOKUP por ejemplo, la primera que 
hemos usado,

224
00:13:17,649 --> 00:13:21,009
Eso está bien, es una función simple, podemos
usarla.

225
00:13:21,009 --> 00:13:24,869
Pero algunas partes, las partes feas,
que hemos eliminado ahora

226
00:13:24,869 --> 00:13:28,629
y sustituido por este corto código Python.

227
00:13:28,629 --> 00:13:31,689
Y como hemos visto en este video
sólo desarrollé el segundo paso, 

228
00:13:31,689 --> 00:13:36,129
Así que su reto para el resto de esta semana
es desarrollar este programa Python

229
00:13:36,129 --> 00:13:40,019
para que no trabaje solamente en estas 
etapas, sino que trabaje para un número

230
00:13:40,019 --> 00:13:44,529
ilimitado de etapas, almenos hasta 12, 
porque este es 

231
00:13:44,529 --> 00:13:46,529
el número más alto de Bacon que hay.

232
00:13:46,529 --> 00:13:49,609
Así que buena suerte con esa tarea y 
nos vemos la semana que viene!
