1
00:00:00,680 --> 00:00:03,280
现在，让我们来看看如何使用Python来

2
00:00:03,290 --> 00:00:06,890
解决贝肯数的例子。 让我们回到 刚才的电子表格

3
00:00:06,890 --> 00:00:10,870
我们先来来看看 大家都喜欢的部分，例如这简单的VLOOKUP。
这看起来

4
00:00:10,870 --> 00:00:12,280
还不错。

5
00:00:12,280 --> 00:00:16,070

可是，这却是挺棘手的，这是因为它不仅有两行，而且它的值也取决于

6
00:00:16,070 --> 00:00:19,310
其他工作表里繁琐的SUMIFS 函数。

7
00:00:19,310 --> 00:00:23,880
所以，我们要把这些都去掉，并用Python来代替它们 。

8
00:00:23,880 --> 00:00:26,650
我们用鼠标选择这一列，然后

9
00:00:26,650 --> 00:00:31,189
把它复制成数值。 这就像一个测试，能让我们看看

10
00:00:31,189 --> 00:00:33,390
Python是否能给出

11
00:00:33,390 --> 00:00:37,700
和原本公式一样的结果。 我们把这些删掉，把空间留给

12
00:00:37,700 --> 00:00:42,380
Phython的代码：“Steps in
Python”，即“Python的步骤”。

13
00:00:44,629 --> 00:00:46,120
现在问题来了，

14
00:00:46,120 --> 00:00:49,989
我们这样做的目的是什么？ 我们究竟在计算什么？

15
00:00:49,989 --> 00:00:52,710
如果我们仔细想想，我们在这里要计算的是：

16
00:00:52,710 --> 00:00:56,469
在每一部电影中, 是否有一个演员

17
00:00:56,469 --> 00:01:00,250
的贝肯数不等于破折号，

18
00:01:00,250 --> 00:01:04,019
即他的贝肯数是一个有意义的数值。

19
00:01:04,019 --> 00:01:07,370
为了让我们弄清楚究竟要把什么输入Python中

20
00:01:07,370 --> 00:01:12,300
我们将需要用理论来分析。

21
00:01:12,300 --> 00:01:16,970
现在，让我们去黑板上看看 究竟我们正在计算什么。 所以呢

22
00:01:16,970 --> 00:01:17,830
我们希望能够

23
00:01:17,830 --> 00:01:23,250
有一个像SUM的函数， 能根据该电影的片名计算出

24
00:01:23,250 --> 00:01:26,110
电影中每位演员的

25
00:01:26,110 --> 00:01:29,970
贝肯数。 那么

26
00:01:29,970 --> 00:01:33,150
这个函数属于什么类型的呢？

27
00:01:33,150 --> 00:01:36,430
先来谈谈对于一部电影，我们的操作步骤应该是怎么样的，

28
00:01:36,430 --> 00:01:41,860
我们输入一部电影的片名，我们想得到的是

29
00:01:41,860 --> 00:01:45,600
一份包含该电影演员的贝肯数的列表。

30
00:01:45,600 --> 00:01:48,520
举例来说，对于《疯狂盲目的爱情》这部电影，

31
00:01:48,520 --> 00:01:51,790
它的列表将是“1- -”，这些是

32
00:01:51,790 --> 00:01:54,170
当前电子表格中的前三行。 所以我们

33
00:01:54,170 --> 00:01:56,110
想要的结果是一份

34
00:01:56,110 --> 00:02:00,920
列表。 那么这份列表里有什么呢？

35
00:02:00,920 --> 00:02:07,120
要不它是一个破折号，表示该演员的贝肯数未知，

36
00:02:07,130 --> 00:02:11,350
要不就是一个确定的数值。

37
00:02:11,350 --> 00:02:14,180
如果你还记得我们之前讲的关于“类型”的知识，

38
00:02:14,190 --> 00:02:16,290
用电子表格来运算列表

39
00:02:16,290 --> 00:02:20,000
是相当困难的工作 。 因为你必须使用数组公式来计算。

40
00:02:20,000 --> 00:02:24,000
但在Python里，列表里是很容易计算的，
因为列表属于Python内置的类型中的一种

41
00:02:24,000 --> 00:02:28,170
并且非常容易掌握。 所以在Python里

42
00:02:28,170 --> 00:02:29,950
这样的事情能很轻松的完成。

43
00:02:29,950 --> 00:02:33,200
如果我们有那张列表 “1- -”，

44
00:02:33,200 --> 00:02:33,970
我们需要计算的

45
00:02:33,970 --> 00:02:40,970
是该列表的贝肯数。
我们现在把这个函数命名为“NextStep”，

46
00:02:44,180 --> 00:02:45,600
我们在这里输入的

47
00:02:45,600 --> 00:02:49,500
就是这张列表。 我们把演员贝肯数的列表输进去

48
00:02:49,500 --> 00:02:53,190
我们得到的

49
00:02:53,190 --> 00:02:58,620
将会是一个值。 所以，这些都是

50
00:02:58,620 --> 00:03:02,819
我们要在Python 中编程的东西。 给我一部电影的名字，

51
00:03:02,819 --> 00:03:04,240
我能给出一份该电影所有演员的贝肯数列表；

52
00:03:04,240 --> 00:03:07,100
给我一张列表，我能给出

53
00:03:07,100 --> 00:03:11,870
那部电影里每个演员的贝肯数。 所以，我们说完了理论，

54
00:03:11,870 --> 00:03:16,210
让我们再回到Excel看看
在Python里应该如何使用定义函数。

55
00:03:16,210 --> 00:03:19,770
让我们启动shell，

56
00:03:19,770 --> 00:03:24,110
点击在DataNitro的Python
Shell，现在我们可以来自定义函数了。

57
00:03:24,110 --> 00:03:27,630

让我们先从简单的开始，比方说我想新建一个函数“plusone”，

58
00:03:27,630 --> 00:03:32,500
当我们把一个数值输入该函数，而结果就是

59
00:03:32,500 --> 00:03:36,840
所输入的数值加上1。 所以这是跟自定义求和函数（SUM）或

60
00:03:36,840 --> 00:03:40,640
自定义最小值函数（MIN）是十分相似的。 我们输入某个数值，
就会得出相应的结果。

61
00:03:40,640 --> 00:03:43,860
例如，如果我们现在问Python 这是什么，

62
00:03:43,860 --> 00:03:48,000
它知道“plusone”是一个函数，而
如果我们把任何数值输入此函数里，

63
00:03:48,000 --> 00:03:49,480
比如5，我们将得到的是5 加上1的结果

64
00:03:49,480 --> 00:03:53,940
即是6。 也许这听起来有点玄妙

65
00:03:53,940 --> 00:03:57,250
但它的道理就是，当你自定义一个函数时

66
00:03:57,250 --> 00:04:00,940
你要这样问自己：我输入的是什么？ 输入的是X这个数值；

67
00:04:00,940 --> 00:04:04,080
而我得到结果是什么？ 结果是X加1所得的数值。

68
00:04:04,080 --> 00:04:06,900
同样地，

69
00:04:06,900 --> 00:04:10,740
我们要利用这自定义函数来解决我们的贝肯数问题。

70
00:04:10,740 --> 00:04:14,390
那么我们来新建一个shell，让我们再编一个函数。

71
00:04:14,390 --> 00:04:18,260
你知道那是什么函数， 就是我们在黑板上定义的函数。

72
00:04:18,260 --> 00:04:22,330
我们先从AllSteps开始。 AllSteps是一个
函数，我们输入

73
00:04:22,330 --> 00:04:25,470
电影的名称，它将计算出

74
00:04:25,470 --> 00:04:29,160
电影里所有演员的培根数。

75
00:04:29,160 --> 00:04:33,510
例如，当我们输入“疯狂盲目的爱情 ”（ 'Crazy
Stupid Love'）时，该函数的运算结果将是

76
00:04:33,510 --> 00:04:37,220
1-破折号-破折号，即是[1- - ]。 现在我们要

77
00:04:37,220 --> 00:04:37,930
详细比对

78
00:04:37,930 --> 00:04:42,470
电子表格中的每一行，看 是否有与我们电影相匹配的一项。

79
00:04:42,470 --> 00:04:45,380
首先，我们从第一行开始, 很明显没有发现任何匹配，

80
00:04:45,380 --> 00:04:48,900
但是当使用“for'语句功能时，

81
00:04:48,900 --> 00:04:51,639
这是Python的特点，

82
00:04:51,639 --> 00:04:55,490
我们可以利用所有东西， 我们可以标注每一行。

83
00:04:55,490 --> 00:04:59,600
我们现在从在第二行开始直到第十二行

84
00:04:59,600 --> 00:05:02,290
在每行中，我们要看的是

85
00:05:02,290 --> 00:05:05,470
在第二列中的值，

86
00:05:05,470 --> 00:05:08,449

所以，我们所在的那一行，即是第“i”行的第2列（i是循环变量）

87
00:05:08,449 --> 00:05:13,300
就是我们要找的

88
00:05:13,300 --> 00:05:14,440
那部

89
00:05:14,440 --> 00:05:17,870
刚刚被输入函数的电影名了。 所以，

90
00:05:17,870 --> 00:05:21,350
这应该让你联想到SUMIF函数，

91
00:05:21,350 --> 00:05:24,370
SUMIF函数只对某些符合

92
00:05:24,370 --> 00:05:28,850
一定条件的数据进行合计。
像这样，如果数据的数值与我们的条件相匹配时

93
00:05:28,850 --> 00:05:33,650
我们就把它们合并求和。
那么，我们应该具体把什么数据添加进这份列表中呢？

94
00:05:33,650 --> 00:05:37,270
不是电影的名称，而是它旁边的那一列， 也就是

95
00:05:37,270 --> 00:05:40,960
我们正在检查的那一行的第三列的那个单元格

96
00:05:40,960 --> 00:05:45,010
如果找到了相匹配的数值，我们通过追加函数将它添加到列表中。

97
00:05:45,010 --> 00:05:49,550
如果所有的行都被检查完毕了，

98
00:05:49,550 --> 00:05:54,330
我们将得到一份列表。 大家应该提醒自己，

99
00:05:54,330 --> 00:05:58,130
像plusone这个函数，我们把5输入进去，得到的结果是6；

100
00:05:58,130 --> 00:06:02,729
而在这里，我们把一部电影名输进去，得到的结果是一份列表。 那么
我们可以把所得到的结果作为

101
00:06:02,729 --> 00:06:03,869
一个变量。

102
00:06:04,380 --> 00:06:07,860
让我们来试试。 我们首先为电影
“疯狂盲目的爱情”创建一个变量，

103
00:06:07,870 --> 00:06:12,370
并把它称为“疯狂盲目的爱情的步骤”，
简称为“StepsCSL”

104
00:06:12,370 --> 00:06:15,150
我们输入该变量的，

105
00:06:15,150 --> 00:06:18,360
正是我们用函数计算得出的结果。 在AllSteps函数中

106
00:06:18,360 --> 00:06:21,639
我们能使用‘疯狂盲目的爱情’ 但在这里，我们应该添加引号“ ”

107
00:06:21,639 --> 00:06:26,180
因为它是一个字符串，是一个文本值。

108
00:06:26,180 --> 00:06:28,180
我们按下回车键，现在的值就被保存到变量中了，

109
00:06:28,180 --> 00:06:32,010
如果有人问Python

110
00:06:32,010 --> 00:06:35,290
现在这个变量里有什么？
其结果将是1-破折号-破折号，即是“1--”

111
00:06:35,290 --> 00:06:38,229
而这正是我们想要的结果，对不对？ 输入“疯狂盲目的爱情”的结果

112
00:06:38,229 --> 00:06:42,240
正是列表中的“1--”。

113
00:06:42,240 --> 00:06:45,400
这样我们 问题的第一部分便得以解决了，

114
00:06:45,400 --> 00:06:48,760
但我们是用Python来解决这个问题的，

115
00:06:48,760 --> 00:06:50,580
而我们想要

116
00:06:50,580 --> 00:06:54,479
结果在电子表格里出现。
我们可以做的是，其实大家之前已经看过了，

117
00:06:54,479 --> 00:06:55,740
就是可以在

118
00:06:55,740 --> 00:06:59,389
Python里编辑该电子表格，我们可以说，

119
00:06:59,389 --> 00:07:03,240
在第二列中第四行的单元格。 哎呀，不好意思说错了，

120
00:07:03,240 --> 00:07:07,580
应该是，在第四列中的第二行

121
00:07:07,580 --> 00:07:08,430
就是我们变量的值。

122
00:07:08,430 --> 00:07:13,210
如果我们现在按下回车键，那个 值将会立即被更新。

123
00:07:13,210 --> 00:07:18,350
大家可以看到， Python能够把整个列表放入一个单元格里。

124
00:07:18,940 --> 00:07:22,440
如果你想在Excel做到这一点，我们不得不使用数组公式，

125
00:07:22,449 --> 00:07:28,120
正如我们在之前的视频中所看到的一样。
Excel不能把一个数组，或一个列表

126
00:07:28,120 --> 00:07:32,449
放入一个单元格里，你必须给它空间填满所有的单元格。

127
00:07:32,449 --> 00:07:35,620
这和Python不一样，我们可以直接把整个列表

128
00:07:35,620 --> 00:07:39,199
放进一个单元格里。 这样显然方便得多了，

129
00:07:39,199 --> 00:07:42,959
尤其是当你也像我一样使用大量的列表时。

130
00:07:43,630 --> 00:07:47,700
好了，接下来我们继续解决问题的第二部分。 我已经清除了

131
00:07:47,710 --> 00:07:50,289
shell里的内容，但是，我们仍然可以

132
00:07:50,289 --> 00:07:53,400
看到在那里的所有函数。 因为Python已经把它们给记住了，

133
00:07:53,400 --> 00:07:57,500
所以那里仍然有AllSteps函数，
而我们现在要建立一个新的函数，

134
00:07:57,500 --> 00:08:01,310
建立一个叫做NextStep函数。
正如我们在黑板上看到的，我们需要把

135
00:08:01,310 --> 00:08:03,120
刚刚创建的列表输入这个函数

136
00:08:03,120 --> 00:08:06,350
它会

137
00:08:06,350 --> 00:08:10,259
得出下一个值。 现在让我们来详细研究所需要的步骤。

138
00:08:10,259 --> 00:08:13,440
我们这里有“1- -”，

139
00:08:13,440 --> 00:08:16,440
跟之前例子中的一样。

140
00:08:16,440 --> 00:08:21,470

我们再次使用“for”语句，“for”是一种适用于循环指令的Python结构

141
00:08:21,470 --> 00:08:24,919
我们正在检查 步骤列表上的每一项。

142
00:08:24,919 --> 00:08:28,639
那么如果我们看到一个不等于破折号的值，譬如1，

143
00:08:28,639 --> 00:08:32,589
我们就知道结果了对不对？ 得出的结果应该就是该值加上1。

144
00:08:32,589 --> 00:08:35,300
即是说， 如果我们看到的值不等于破折号，

145
00:08:35,300 --> 00:08:39,189
这里用的是感叹号“!”语句，

146
00:08:39,189 --> 00:08:42,829
那么我们知道返还的值将是该数值加1。

147
00:08:42,829 --> 00:08:44,839
但是，如果我们看到的是破折号呢？

148
00:08:44,839 --> 00:08:47,720
我们不知道应该返还哪一个值，因为下一行

149
00:08:47,720 --> 00:08:51,959
既可以是破折号，也可以是1。 因此，如果我们看到的是破折号

150
00:08:51,959 --> 00:08:52,949
那么我们暂时还不知到该返还什么，

151
00:08:52,949 --> 00:08:56,040
可是，如果我们只看到破折号，

152
00:08:56,040 --> 00:08:58,679
而没有返还过任何数值，

153
00:08:58,679 --> 00:09:00,790
那么我们将返还一个破折号，

154
00:09:00,790 --> 00:09:01,610
因为这正是我们想要的。

155
00:09:01,610 --> 00:09:04,670
即是说，如果所有都是破折号，结果将会是一个破折号。

156
00:09:04,670 --> 00:09:09,679
现在我们的函数已被定义好了。我们 还有变量“1 - -”，

157
00:09:09,679 --> 00:09:12,499
就是在之前的幻灯片得出的那个。 那么

158
00:09:12,499 --> 00:09:14,569
现在我们可以使用它了，

159
00:09:14,569 --> 00:09:15,860
我们可以把变量输入函数中，

160
00:09:15,860 --> 00:09:19,660
就像这样，

161
00:09:19,660 --> 00:09:22,839
像plusone函数一样，我们只要把 变量输入进去，

162
00:09:22,839 --> 00:09:27,829
就可以得到结果了。 如果我们把这个
列表输入其中，得到的结果将是2，

163
00:09:27,829 --> 00:09:29,589
正是我们想要的结果。

164
00:09:29,589 --> 00:09:33,740
如果我们的电影里有三位演员，其中一位是凯文·贝肯

165
00:09:33,740 --> 00:09:38,089
而其他两位演员的贝肯数未知，

166
00:09:38,089 --> 00:09:39,170
那么，这部电影中所有演员的贝肯数

167
00:09:39,170 --> 00:09:42,150
将会等于2。

168
00:09:43,860 --> 00:09:49,399
到目前为止，我们只用了Python shell这个办法

169
00:09:49,399 --> 00:09:52,720
我们其实也可以使用编辑器来解决问题。

170
00:09:52,720 --> 00:09:56,980
这样我们就不必小之又小的行里输入函数了。

171
00:09:56,980 --> 00:10:02,569

我们只需要把函数输入文本文件，然后把它们保存下来，就像保存电子表格一样。

172
00:10:02,569 --> 00:10:07,059
你也可以保存这些Python 文件，

173
00:10:07,059 --> 00:10:10,100
这样做当然比输入它们简单多了，因为一旦你把Shell关闭，

174
00:10:10,100 --> 00:10:14,679
你所定义的函数都会消失。 所以我们把这一切，

175
00:10:14,679 --> 00:10:18,589
包括函数的定义等等，都放入一个文件当中。

176
00:10:18,589 --> 00:10:23,019
我们可以直接在该文件上运行程序， 并把它输入电子表格里 。

177
00:10:23,019 --> 00:10:26,170
我们将再次使用 “for”循环语句，

178
00:10:26,170 --> 00:10:28,399
而且为了简化我们即将打印的结果，

179
00:10:28,399 --> 00:10:33,019
我们只打印每行的序号。

180
00:10:33,019 --> 00:10:37,509
这样做只是为了让你们看看这究竟是怎么运作的。
我们来设定"i”的值，

181
00:10:37,509 --> 00:10:40,670
比如说4是“i”的值

182
00:10:40,670 --> 00:10:44,449
我们完成了这一步，把文件保存，然后我们点击“运行”，

183
00:10:44,449 --> 00:10:48,369
你们看，所有的“i”都出现在那里了。

184
00:10:48,369 --> 00:10:51,689
但其实，我犯了一个小错误，

185
00:10:51,689 --> 00:10:55,319
我一直用的是“到12”（“to 12”），

186
00:10:55,319 --> 00:10:59,919
我忘了应该用的是“直到12”("until
12")，而不是“直到和包括12”。 因此，这实际上应该是13

187
00:10:59,920 --> 00:11:02,019
函数也是一样的。

188
00:11:02,019 --> 00:11:05,269
好，现在我们运行到13，

189
00:11:05,269 --> 00:11:06,769
你可以看到所有的行都填满了。

190
00:11:06,769 --> 00:11:09,850
但是，我们当然不想“i”出现在这里，

191
00:11:09,850 --> 00:11:13,709
而我们想要的是刚刚定义的那两个函数的结果。

192
00:11:13,709 --> 00:11:17,660
那么我们再次从AllSteps开始，

193
00:11:17,660 --> 00:11:21,509
从第二列中取得数值。

194
00:11:21,509 --> 00:11:25,050
现在我们有了电影名称，这是我们所需的第一步，

195
00:11:25,050 --> 00:11:28,189
因为我们将在AllSteps函数里

196
00:11:28,189 --> 00:11:33,189
输入电影的名称。 现在我们把它输入AllSteps。

197
00:11:33,189 --> 00:11:38,279
在这里，我们不再用字符串了，而是直接从电子表格中获得数值

198
00:11:38,279 --> 00:11:41,319
看起来很不错吧？ 好了，现在对于每部电影

199
00:11:41,319 --> 00:11:45,889
我们都有一份它所有演员的列表，

200
00:11:45,889 --> 00:11:47,160
我们只需要把该列表输入NextStep函数。

201
00:11:47,160 --> 00:11:50,879
就像这样， 我们把列表输进去了，

202
00:11:50,879 --> 00:11:53,730
现在我们点击运行。 看看这个

203
00:11:53,730 --> 00:11:58,049
得出的结果是和我们之前用

204
00:11:58,049 --> 00:12:02,209
VLOOKUP和SUMIFS得到的结果是完全一样的，

205
00:12:02,209 --> 00:12:05,869
之前我们使用了很多公式，

206
00:12:05,869 --> 00:12:09,439
而这里我们只做了一点点编程就把它算出来了。 为什么这里的编程

207
00:12:09,439 --> 00:12:13,429
比VLOOKUP更简便呢？ 因为我们使用的列表和循环结构

208
00:12:13,429 --> 00:12:18,969
并不是电子表格本身就有的功能。

209
00:12:18,969 --> 00:12:23,160
这种对比在编程中十分常见。

210
00:12:23,160 --> 00:12:24,089
然而，如果你想要

211
00:12:24,089 --> 00:12:29,009
检查所有这份电子表格的每一行以及作某些特殊操作的话，

212
00:12:29,009 --> 00:12:32,779
这就不是电子表格能胜任的了。 电子表格是用来计算的，

213
00:12:32,779 --> 00:12:36,910
而不是用于检查数值

214
00:12:36,910 --> 00:12:41,910
以及改变数值的。 在以上提到的这种情况，

215
00:12:41,910 --> 00:12:43,910
如果我们使用编程语言的话就会容易一点了。

216
00:12:45,520 --> 00:12:48,799
所以，我们现在能做的就是

217
00:12:48,799 --> 00:12:53,379
去掉那些我们不再需要的SUMIFS 语句，它们实在太难看了。
我们用鼠标来选取它们

218
00:12:53,380 --> 00:12:58,470
然后把它们都清除掉，我们不希望再看到你了。 而在这里，

219
00:12:58,470 --> 00:13:02,829

留言我是如何趁你不留神的时候悄悄地把VLOOKUPS放回原处。

220
00:13:02,829 --> 00:13:07,149
只为了再次演示给大家看我是如何删除它的。 所以我们并不需要

221
00:13:07,149 --> 00:13:10,799
这些值了。 但是我们不必清除所有的公式

222
00:13:10,799 --> 00:13:14,509
有些公式还是有用的，

223
00:13:14,509 --> 00:13:17,649
例如，这条VLOOKUP语句，就是我们使用的第一条公式，

224
00:13:17,649 --> 00:13:21,009
它没有任何问题，只是一个简单的函数，你可以使用它。

225
00:13:21,009 --> 00:13:24,869
但有些冗长的部分，我们已把它们删除了，

226
00:13:24,869 --> 00:13:28,629
取而代之的是这短短的Python代码。

227
00:13:28,629 --> 00:13:31,689
你们在这个视频里只看到我完成了第二个步骤，

228
00:13:31,689 --> 00:13:36,129
所以我在本周给你的挑战是完成整个Python程序

229
00:13:36,129 --> 00:13:40,019
让它不仅运行两 步，而是运行无数步，

230
00:13:40,019 --> 00:13:44,529
或者说至少要到12步，

231
00:13:44,529 --> 00:13:46,529
因为那是最大的贝肯数。

232
00:13:46,529 --> 00:13:49,609
祝你做作业好运， 我们下周见！
