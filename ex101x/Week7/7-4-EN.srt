1
00:00:00,680 --> 00:00:03,280
So let's see how we can use Python

2
00:00:03,290 --> 00:00:06,890
to solve our Bacon example. Let's go back
to our spreadsheet

3
00:00:06,890 --> 00:00:10,870
and let's have a look at the parts that
we like, like this simple VLOOKUP. It's

4
00:00:10,870 --> 00:00:12,280
pretty okay.

5
00:00:12,280 --> 00:00:16,070
However, this is problematic, it has two
lines and also it depends

6
00:00:16,070 --> 00:00:19,310
on those ugly SUMIFs in the other worksheet.

7
00:00:19,310 --> 00:00:23,880
So, we want to get rid of that and
replace that with Python.

8
00:00:23,880 --> 00:00:26,650
So let's take this column, select it

9
00:00:26,650 --> 00:00:31,189
and let's copy it back as values.
It's like a test, so we can see if our

10
00:00:31,189 --> 00:00:33,390
Python will do the exact same thing

11
00:00:33,390 --> 00:00:37,700
as the original formulas. And we get rid
of that and make some room

12
00:00:37,700 --> 00:00:42,380
for our Python code: 'Steps in Python'.

13
00:00:44,629 --> 00:00:46,120
So the question is now, what

14
00:00:46,120 --> 00:00:49,989
are we going to do here? What actually
are we calculating?

15
00:00:49,989 --> 00:00:52,710
And if we think about it, what we're going
to calculate here

16
00:00:52,710 --> 00:00:56,469
is: for each of the movies is there an
actor

17
00:00:56,469 --> 00:01:00,250
in it, that has a Bacon number that is
unequal to

18
00:01:00,250 --> 00:01:04,019
a dash, that has a defined Bacon
number.

19
00:01:04,019 --> 00:01:07,370
And in order for us to figure out what
to place there in Python,

20
00:01:07,370 --> 00:01:12,300
we're going to need the theory glasses.

21
00:01:12,300 --> 00:01:16,970
So let's go to the blackboard and have a look
at what exactly we are calculating. So what

22
00:01:16,970 --> 00:01:17,830
we would like to have

23
00:01:17,830 --> 00:01:23,250
is a function like SUM, that calculates
based on the name of the movie,

24
00:01:23,250 --> 00:01:26,110
the list of actors that are in it, their

25
00:01:26,110 --> 00:01:29,970
Bacon numbers. So what

26
00:01:29,970 --> 00:01:33,150
is the type of that function?

27
00:01:33,150 --> 00:01:36,430
So let's say all of the steps for a given
movie,

28
00:01:36,430 --> 00:01:41,860
we put in a movie, and what we want to
get out

29
00:01:41,860 --> 00:01:45,600
is a list of Bacon numbers for
that movie.

30
00:01:45,600 --> 00:01:48,520
So for instance, for 'Crazy Stupid Love'
this list would be

31
00:01:48,520 --> 00:01:51,790
one-dash-dash [1--], these are the first three

32
00:01:51,790 --> 00:01:54,170
rows currently in the spreadsheet. So what
we

33
00:01:54,170 --> 00:01:56,110
get is a list

34
00:01:56,110 --> 00:02:00,920
of things. So what is in this list? 

35
00:02:00,920 --> 00:02:07,120
It's either a dash, either it's undefined

36
00:02:07,130 --> 00:02:11,350
or it will be a value.

37
00:02:11,350 --> 00:02:14,180
And if you remember from the previous
types,

38
00:02:14,190 --> 00:02:16,290
lists are quite hard to work with in

39
00:02:16,290 --> 00:02:20,000
spreadsheets. You have to use array
formulas for that.

40
00:02:20,000 --> 00:02:24,000
But in Python lists are very easy,
they're one of the built-in types

41
00:02:24,000 --> 00:02:28,170
and a very easy to manipulate. So
something like this: will be easily done

42
00:02:28,170 --> 00:02:29,950
in Python.

43
00:02:29,950 --> 00:02:33,200
If we have that list, one-dash-dash [1--],
what we need to

44
00:02:33,200 --> 00:02:33,970
calculate

45
00:02:33,970 --> 00:02:40,970
is the Bacon number of that list. So
let's call that function NextStep,

46
00:02:44,180 --> 00:02:45,600
what we put in here

47
00:02:45,600 --> 00:02:49,500
is this list. So we put in the list

48
00:02:49,500 --> 00:02:53,190
of the Bacon numbers of the actors and what
we will get out

49
00:02:53,190 --> 00:02:58,620
is a value. So these are the things that
we're going to program

50
00:02:58,620 --> 00:03:02,819
in Python. Give me a movie and I will
give you a list of the Bacon numbers of

51
00:03:02,819 --> 00:03:04,240
the actors in it,

52
00:03:04,240 --> 00:03:07,100
and give me that list and I will give you
the Bacon number of

53
00:03:07,100 --> 00:03:11,870
everyone that is in this movie. So we
don't need the theory glasses anymore,

54
00:03:11,870 --> 00:03:16,210
let's go back to Excel and have a look
at how function defining works in Python.

55
00:03:16,210 --> 00:03:19,770
So let's power up a shell, we click Python
Shell

56
00:03:19,770 --> 00:03:24,110
in DataNitro and now we can define
functions.

57
00:03:24,110 --> 00:03:27,630
So let's start with an easy one, we say we
wanna have a function 'plusone',

58
00:03:27,630 --> 00:03:32,500
where we put in something and the result
is that something

59
00:03:32,500 --> 00:03:36,840
plus one. So this is very much like
defining our own SUM function or our own

60
00:03:36,840 --> 00:03:40,640
MIN function. We can put something in,
and we get a result.

61
00:03:40,640 --> 00:03:43,860
For example, now if we ask Python
what is this,

62
00:03:43,860 --> 00:03:48,000
it knows that plusone is a function and
if we put something in, for instance we get

63
00:03:48,000 --> 00:03:49,480
the plusone of 5

64
00:03:49,480 --> 00:03:53,940
the result is 6. So, it's a bit cryptic maybe,

65
00:03:53,940 --> 00:03:57,250
but the idea is that if you define your own
functions

66
00:03:57,250 --> 00:04:00,940
and you can say what do I take in? The
number X.

67
00:04:00,940 --> 00:04:04,080
 And what do I return? That number X plus one.

68
00:04:04,080 --> 00:04:06,900
And this is the exact same
thing, the

69
00:04:06,900 --> 00:04:10,740
function defining, that we're going to
use to address our Bacon issue.

70
00:04:10,740 --> 00:04:14,390
So let's make another shell and let's
make another function.

71
00:04:14,390 --> 00:04:18,260
And you know what function, the functions
that we defined on the blackboard.

72
00:04:18,260 --> 00:04:22,330
We start with AllSteps. AllSteps is a
function that takes in

73
00:04:22,330 --> 00:04:25,470
the name of a movie and it returns

74
00:04:25,470 --> 00:04:29,160
all the Bacon numbers of people in that
movie.

75
00:04:29,160 --> 00:04:33,510
So for example, for 'Crazy Stupid Love' the
result of this function would be one

76
00:04:33,510 --> 00:04:37,220
and a dash and another dash [1--]. So we're
going to

77
00:04:37,220 --> 00:04:37,930
traverse

78
00:04:37,930 --> 00:04:42,470
all the lines in our spreadsheet and see
if we have a match for our movie.

79
00:04:42,470 --> 00:04:45,380
Initially, if we start with the first line
of course we haven't found

80
00:04:45,380 --> 00:04:48,900
any matches yet and then with the 'for'

81
00:04:48,900 --> 00:04:51,639
syntax function, this is a Python thing,

82
00:04:51,639 --> 00:04:55,490
we can use everything; we can address
every line.

83
00:04:55,490 --> 00:04:59,600
So we start at the second line and we go
until the twelfth line

84
00:04:59,600 --> 00:05:02,290
and at every line we're going to look is

85
00:05:02,290 --> 00:05:05,470
the value in the second column, so in

86
00:05:05,470 --> 00:05:08,449
the row that we are in, which is 'i', our
variable

87
00:05:08,449 --> 00:05:13,300
for the loop, in the second column, is the
value of that thing that we are

88
00:05:13,300 --> 00:05:14,440
inspecting

89
00:05:14,440 --> 00:05:17,870
equal to the movie we have put into our function.
So,

90
00:05:17,870 --> 00:05:21,350
this should remind you of the SUMIF
function,

91
00:05:21,350 --> 00:05:24,370
where we're summing a bunch of lines
only if it matches

92
00:05:24,370 --> 00:05:28,850
a certain value. Well, here we are grabbing
a piece of values together

93
00:05:28,850 --> 00:05:33,650
only if it matches a certain value. So
what are we adding to our list?

94
00:05:33,650 --> 00:05:37,270
Not the name of the movie, but the
column right next to it. So the

95
00:05:37,270 --> 00:05:40,960
cell on the row we are inspecting in
the third column.

96
00:05:40,960 --> 00:05:45,010
If we have a match, we add this to our
list with the append function.

97
00:05:45,010 --> 00:05:49,550
And if we're done, if all of the rows have
been inspected, then

98
00:05:49,550 --> 00:05:54,330
we return the list of steps. So
remind yourself of,

99
00:05:54,330 --> 00:05:58,130
like the plusone, we put in five we get
back six, this is,

100
00:05:58,130 --> 00:06:02,729
we put in a movie we get back a list. So
we can put the result of this into a

101
00:06:02,729 --> 00:06:03,869
variable.

102
00:06:04,380 --> 00:06:07,860
Let's try that. For the movie 'Crazy
Stupid Love'

103
00:06:07,870 --> 00:06:12,370
we make a variable called Steps of
Crazy Stupid Love [StepsCSL]

104
00:06:12,370 --> 00:06:15,150
and what we're going to put in that
variable

105
00:06:15,150 --> 00:06:18,360
is the result of our function. The AllSteps

106
00:06:18,360 --> 00:06:21,639
applied on 'Crazy Stupid Love'. But here we
should

107
00:06:21,639 --> 00:06:26,180
add quotes ["], because it's a string, a text
value.

108
00:06:26,180 --> 00:06:28,180
So we hit enter and now the value is

109
00:06:28,180 --> 00:06:32,010
saved in our variable and if we ask
Python now what is in

110
00:06:32,010 --> 00:06:35,290
this variable? The result will be one
dash dash [1--],

111
00:06:35,290 --> 00:06:38,229
and this is exactly what we wanted, right?
The result

112
00:06:38,229 --> 00:06:42,240
of 'Crazy Stupid Love' is the list one dash dash [1--].

113
00:06:42,240 --> 00:06:45,400
So the first part of our
problem is solved,

114
00:06:45,400 --> 00:06:48,760
but it is still solved in the Python world,

115
00:06:48,760 --> 00:06:50,580
and we would like to have this value back

116
00:06:50,580 --> 00:06:54,479
in the spreadsheet world. So we can do
that, we've seen that before, we can edit

117
00:06:54,479 --> 00:06:55,740
the spreadsheet from

118
00:06:55,740 --> 00:06:59,389
Python, we can say: the cell in the

119
00:06:59,389 --> 00:07:03,240
second column in the fourth row. Oops I'm
sorry,

120
00:07:03,240 --> 00:07:07,580
second row in the fourth column should
be the value that we have in our

121
00:07:07,580 --> 00:07:08,430
variable.

122
00:07:08,430 --> 00:07:13,210
And if we hit enter now, immediately
the value has been updated.

123
00:07:13,210 --> 00:07:18,350
And what you see here is that Python can
put an entire list in a cell.

124
00:07:18,940 --> 00:07:22,440
If you want to do that with Excel we
have to use array formulas

125
00:07:22,449 --> 00:07:28,120
as we've seen in videos of previous
weeks. Excel cannot put an array, a list

126
00:07:28,120 --> 00:07:32,449
in one cell, you have to give it space to
fill up all the cells.

127
00:07:32,449 --> 00:07:35,620
This is not the case with Python, we can
just take the whole list

128
00:07:35,620 --> 00:07:39,199
and put it in a cell. Which is a lot
more convenient,

129
00:07:39,199 --> 00:07:42,959
if you are using a lot of list
operations like we are.

130
00:07:43,630 --> 00:07:47,700
So let's continue with the second half
of our problem. I have cleared

131
00:07:47,710 --> 00:07:50,289
the shell now, however, we can still

132
00:07:50,289 --> 00:07:53,400
see all the functions that are there.
Python has remembered them,

133
00:07:53,400 --> 00:07:57,500
so we still have the AllSteps function
and we're going to make a new one now.

134
00:07:57,500 --> 00:08:01,310
We're going to make the function NextStep.
As we saw on the blackboard, this is

135
00:08:01,310 --> 00:08:03,120
a function that takes in the list

136
00:08:03,120 --> 00:08:06,350
that we have just created and returns

137
00:08:06,350 --> 00:08:10,259
the next value. So we're going to
traverse the steps,

138
00:08:10,259 --> 00:08:13,440
one dash dash [1--] in this case, just as we
have

139
00:08:13,440 --> 00:08:16,440
traversed the rows in the previous example.

140
00:08:16,440 --> 00:08:21,470
So we use 'for' again, a Python construct
that is used for looping,

141
00:08:21,470 --> 00:08:24,919
and we are inspecting all of the elements
in our steps list.

142
00:08:24,919 --> 00:08:28,639
So if we see something that is not a dash,
like a one,

143
00:08:28,639 --> 00:08:32,589
we know what the result is, right? Then
the result should be that value

144
00:08:32,589 --> 00:08:35,300
plus one. So if we see something

145
00:08:35,300 --> 00:08:39,189
unequal to, that is the exclamation mark syntax,

146
00:08:39,189 --> 00:08:42,829
then we know that we have to return plus one.

147
00:08:42,829 --> 00:08:44,839
But, what if we see a dash?

148
00:08:44,839 --> 00:08:47,720
We don't know what to return, because the
next row

149
00:08:47,720 --> 00:08:51,959
could be a dash or it could be a one.
So if we see a dash we don't know

150
00:08:51,959 --> 00:08:52,949
yet,

151
00:08:52,949 --> 00:08:56,040
however, if we've only seen dashes and
we haven't returned

152
00:08:56,040 --> 00:08:58,679
anything yet, then we are going to return

153
00:08:58,679 --> 00:09:00,790
a dash, because that exactly expresses what

154
00:09:00,790 --> 00:09:01,610
we want.

155
00:09:01,610 --> 00:09:04,670
If everything is a dash the result will
be a dash.

156
00:09:04,670 --> 00:09:09,679
So we have a function, it is defined, and
we still have our variable, one dash

157
00:09:09,679 --> 00:09:12,499
dash [1--], that we've made in a previous slide.
So

158
00:09:12,499 --> 00:09:14,569
now we can use that, we can call this

159
00:09:14,569 --> 00:09:15,860
function

160
00:09:15,860 --> 00:09:19,660
on the variable and it goes like this:

161
00:09:19,660 --> 00:09:22,839
like plusone, we just put
the variable in

162
00:09:22,839 --> 00:09:27,829
and we get the result. So if we put this
list in, our result is 2, which is

163
00:09:27,829 --> 00:09:29,589
exactly what we wanted.

164
00:09:29,589 --> 00:09:33,740
If we have a movie with three actors, one
is Kevin Bacon

165
00:09:33,740 --> 00:09:38,089
and the other two have an undefined
Bacon number, then this movie will give

166
00:09:38,089 --> 00:09:39,170
the Bacon number of

167
00:09:39,170 --> 00:09:42,150
2 to everyone that has played in it.

168
00:09:43,860 --> 00:09:49,399
So, so far we've been using only the Python
shell

169
00:09:49,399 --> 00:09:52,720
option but what we can also do
is use the editor.

170
00:09:52,720 --> 00:09:56,980
Then we don't have to type in the
functions on the crazy little line thingy,

171
00:09:56,980 --> 00:10:02,569
we can just type them in a text file and
save this, just as you save a spreadsheet.

172
00:10:02,569 --> 00:10:07,059
You can also save these python files
and that's of course a lot easier

173
00:10:07,059 --> 00:10:10,100
than typing them in, because once you've
closed the shell

174
00:10:10,100 --> 00:10:14,679
all the functions that you have defined
are gone. So we put everything,

175
00:10:14,679 --> 00:10:18,589
the same function definitions, now in a file.

176
00:10:18,589 --> 00:10:23,019
And from that file we can run it
and put it back into the spreadsheet.

177
00:10:23,019 --> 00:10:26,170
So again, we're going to use a for loop

178
00:10:26,170 --> 00:10:28,399
and for all of the lines we're going to

179
00:10:28,399 --> 00:10:33,019
print, to make it easy, we're just going
to print the number of the row.

180
00:10:33,019 --> 00:10:37,509
Just so you can see how it goes. So we
say the value of 'i'

181
00:10:37,509 --> 00:10:40,670
and 4 is going to be just 'i'.

182
00:10:40,670 --> 00:10:44,449
So if we made that, we've saved the file
and we hit run,

183
00:10:44,449 --> 00:10:48,369
*whoop* you see at one go all

184
00:10:48,369 --> 00:10:51,689
the 'i's are there, but I've made a mistake,

185
00:10:51,689 --> 00:10:55,319
I was using "to 12" all the time and I
forgot that

186
00:10:55,319 --> 00:10:59,919
it's "until 12" and not "until and
including 12". So, this should actually be

187
00:10:59,920 --> 00:11:02,019
13 and so has the function.

188
00:11:02,019 --> 00:11:05,269
So, now we've gone until 13 and you see all
of the

189
00:11:05,269 --> 00:11:06,769
rows are filled.

190
00:11:06,769 --> 00:11:09,850
But, of course, we don't want that 'i' in there,
what we'd like to have

191
00:11:09,850 --> 00:11:13,709
is the result of those two functions
that we've just defined.

192
00:11:13,709 --> 00:11:17,660
So let's start with the AllSteps again,
so we take the

193
00:11:17,660 --> 00:11:21,509
the value from the second column.

194
00:11:21,509 --> 00:11:25,050
So now we have the movies, that's the
first step we need,

195
00:11:25,050 --> 00:11:28,189
because the name of the movie is what
we're going to put into

196
00:11:28,189 --> 00:11:33,189
the AllSteps functions. So here we go,
AllSteps.

197
00:11:33,189 --> 00:11:38,279
In it, we're not using a string anymore, but
we get the value from the spreadsheet.

198
00:11:38,279 --> 00:11:41,319
It's nice right? So now for every movie

199
00:11:41,319 --> 00:11:45,889
we have a list of all the actors that are
in it and we just need to put that list

200
00:11:45,889 --> 00:11:47,160
into the NextStep

201
00:11:47,160 --> 00:11:50,879
function. There we go, we put in the
list,

202
00:11:50,879 --> 00:11:53,730
now we hit run. Look at that!

203
00:11:53,730 --> 00:11:58,049
The result is exactly the same as
the result that we have obtained

204
00:11:58,049 --> 00:12:02,209
with all the VLOOKUPs and the SUMIFs,
but instead of using

205
00:12:02,209 --> 00:12:05,869
a lot of formulas, we just used a
little bit of code

206
00:12:05,869 --> 00:12:09,439
to calculate the values. Why is this
code

207
00:12:09,439 --> 00:12:13,429
easier than VLOOKUP? Because we
use constructs like

208
00:12:13,429 --> 00:12:18,969
a list and a loop that are not native, not
natural to spreadsheets.

209
00:12:18,969 --> 00:12:23,160
These are contracts that are very common
in programming, however, if you want to do

210
00:12:23,160 --> 00:12:24,089
something like

211
00:12:24,089 --> 00:12:29,009
inspect all the lines of my spreadsheet
and do something in a certain case,

212
00:12:29,009 --> 00:12:32,779
this is not something that spreadsheets
are made for. They're made for calculation

213
00:12:32,779 --> 00:12:36,910
and not really for inspecting values
and then changing them

214
00:12:36,910 --> 00:12:41,910
continuously. So these are scenarios
where programming languages are just

215
00:12:41,910 --> 00:12:43,910
a little bit easier. 

216
00:12:45,520 --> 00:12:48,799
So what we can do
now, we can get rid of those,

217
00:12:48,799 --> 00:12:53,379
we don't need those ugly SUMIFs
anymore. We can select them

218
00:12:53,380 --> 00:12:58,470
and we're done with it, go away, we don't
wanna see you anymore. And here,

219
00:12:58,470 --> 00:13:02,829
notice how I've put back the VLOOKUPs
secretly while you weren't looking,

220
00:13:02,829 --> 00:13:07,149
just to show you it one more time, before
we get rid of it too. So we don't need

221
00:13:07,149 --> 00:13:10,799
those values anymore. But we don't
need to get rid of all of the

222
00:13:10,799 --> 00:13:14,509
formulas - some of them are still fine,

223
00:13:14,509 --> 00:13:17,649
The  VLOOKUP for instance, the first
one that we used,

224
00:13:17,649 --> 00:13:21,009
it's fine, it's a simple function, you can
use it.

225
00:13:21,009 --> 00:13:24,869
But some parts, the ugly parts, we have
removed now

226
00:13:24,869 --> 00:13:28,629
and replaced them by this short Python
code.

227
00:13:28,629 --> 00:13:31,689
And you see me in this video I only did
the second step,

228
00:13:31,689 --> 00:13:36,129
so your challenge for the rest of the
week is to extend this Python program

229
00:13:36,129 --> 00:13:40,019
so that it doesn't just work for two
steps, but it works for an

230
00:13:40,019 --> 00:13:44,529
unlimited number of steps, or let's say
at least until 12, because that's the

231
00:13:44,529 --> 00:13:46,529
highest Bacon number there is.

232
00:13:46,529 --> 00:13:49,609
So good luck with that homework and see
you next week!

