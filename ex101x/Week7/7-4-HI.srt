1
00:00:00,680 --> 00:00:03,280
तो चलिए देखते हैं कैसे हम पाइथन का उपयोग कर सकते हैं 

2
00:00:03,290 --> 00:00:06,890
हमारे बेकन उदाहरण को हल करने के लिए। चलिये वापस चलते हैं
हमारे स्प्रेडशीट में

3
00:00:06,890 --> 00:00:10,870
और उन भागों पर एक नज़र करते हैं जो
हमें पसंद है, इस सरल VLOOKUP की तरह। यह 

4
00:00:10,870 --> 00:00:12,280
काफी ठीक है।

5
00:00:12,280 --> 00:00:16,070
हालांकि, यह समस्याग्रस्त है, उस में दो 
लाइनों है और यह निर्भर भी करता है  

6
00:00:16,070 --> 00:00:19,310
अन्य वर्कशीट में उन बदसूरत SUMIFs पर। 

7
00:00:19,310 --> 00:00:23,880
तो, हम उससे छुटकारा पाना चाहते हैं और प्रतिस्थापित करना चाहते हैं
पाइथन उस जगह। 

8
00:00:23,880 --> 00:00:26,650
तो आइए इस कॉलम लेते हैं, उसका चयन करें, 

9
00:00:26,650 --> 00:00:31,189
और मूल्यों के रूप में इसे वापस प्रतिलिपि करते हैं। 
यह एक परीक्षण की तरह है, हम देख सकते हैं अगर हमारे 

10
00:00:31,189 --> 00:00:33,390
पाइथन एक ही बात करेंगे 
 
11
00:00:33,390 --> 00:00:37,700
मूल फार्मूले के रूप में। और उससे हम छुटकारा पाते हैं
और उस में से कुछ जगह बनाते हैं

12
00:00:37,700 --> 00:00:42,380
हमारे पाइथन कोड के लिए: 'पाइथन का कदम' | 

13
00:00:44,629 --> 00:00:46,120
तो अब सवाल है, what

14
00:00:46,120 --> 00:00:49,989
हम यहाँ क्या करने जा रहे हैं? वास्तव में क्या
हम गणना कर रहे हैं?  

15
00:00:49,989 --> 00:00:52,710
हम इसके बारे में सोचते हैं, तो हम 
गणना कर रहे है 

16
00:00:52,710 --> 00:00:56,469
यहां : प्रत्येक फिल्मों में वहाँ एक 
अभिनेता है

17
00:00:56,469 --> 00:01:00,250
जिसका बेकन संख्या
असमान है

18
00:01:00,250 --> 00:01:04,019
डैश , जो एक परिभाषित बेकन 
नंबर है।

19
00:01:04,019 --> 00:01:07,370
और हमें यह पता लगाने के लिए 
पायथन में क्या डालना है

20
00:01:07,370 --> 00:01:12,300
हम सिद्धांत चश्मे की जरूरत होने जा रहे हैं। 

21
00:01:12,300 --> 00:01:16,970
तो चलिए ब्लैकबोर्ड के पास जाकर एक नज़र करते हैं
पर क्या वास्तव में हम गणना कर रहे हैं। तो 

22
00:01:16,970 --> 00:01:17,830
हम चाहते हैं 

23
00:01:17,830 --> 00:01:23,250
SUM की तरह एक कार्य , जो गणना करता है 
फिल्म के नाम के आधार पर,  

24
00:01:23,250 --> 00:01:26,110
उस अभिनेताओं की सूची, उनके  

25
00:01:26,110 --> 00:01:29,970
बेकन संख्या। तो यह 

26
00:01:29,970 --> 00:01:33,150
कार्य का प्रकार क्या है? 

27
00:01:33,150 --> 00:01:36,430
तो चलिए किसी दिए गए फिल्म के लिए सभी 
चरणों में ,

28
00:01:36,430 --> 00:01:41,860
हम एक फिल्म डाल दिया है, और हम चाहते हैं
बाहर निकालना 

29
00:01:41,860 --> 00:01:45,600
बेकन संख्या की एक सूची 
वह चलचित्र के लिए। 

30
00:01:45,600 --> 00:01:48,520
उदाहरण के लिए, 'क्रेजी स्टुपिड लव' के लिए तो
इस सूची होगा

31
00:01:48,520 --> 00:01:51,790
एक डेश-डेश  [1--], इन पहले तीन

32
00:01:51,790 --> 00:01:54,170
वर्तमान में स्प्रेडशीट की पंक्तियाँ  हैं । तो क्या
पर हम पाते 

33
00:01:54,170 --> 00:01:56,110
है एक सूची  

34
00:01:56,110 --> 00:02:00,920
चीजों की। तो इस सूची में क्या है? 

35
00:02:00,920 --> 00:02:07,120
या तो यह डैश है, या तो यह अपरिभाषित है,

36
00:02:07,130 --> 00:02:11,350
या यह एक मूल्य होगा। 

37
00:02:11,350 --> 00:02:14,180
और अगर आपको पहले 
प्रकार से याद है, 

38
00:02:14,190 --> 00:02:16,290
सूचियों के साथ काम करने में काफी मेहनत हैं 

39
00:02:16,290 --> 00:02:20,000
स्प्रेडशीट में। उस के लिए आपको सरणी फार्मूले का उपयोग करने 
की ज़रूरत है।  

40
00:02:20,000 --> 00:02:24,000
लेकिन पायथन में सूचियों बहुत आसान हैं,
वे निर्मित प्रकारों में से हैं 

41
00:02:24,000 --> 00:02:28,170
और बहुत ही आसान है हेरफेर करने के लिए। तो
कुछ इस तरह: आसानी से किया जा जाएगा  

42
00:02:28,170 --> 00:02:29,950
पायथन में। 

43
00:02:29,950 --> 00:02:33,200
अगर हमारे साथ उस सूची है, एक डेश-डेश [1--] 
हमे करने की जरूरत है

44
00:02:33,200 --> 00:02:33,970
हिसाब करना 

45
00:02:33,970 --> 00:02:40,970
उस सूची के बेकन संख्या। तो, हम इसे 
NextStep कार्य का नाम देते है 

46
00:02:44,180 --> 00:02:45,600
हम यहाँ क्या रखते है 

47
00:02:45,600 --> 00:02:49,500
इस सूची में। इसलिए हम सूची में डाल दिया  

48
00:02:49,500 --> 00:02:53,190
अभिनेताओं के बेकन संख्या और 
हम बाहर निकालेगें

49
00:02:53,190 --> 00:02:58,620
एक मूल्य | तो ये चीजें हैं जो हम इस   
मंसूबा करने जा रहे हैं

50
00:02:58,620 --> 00:03:02,819
पायथन में। मुझे एक फिल्म दीजिए और मैं दूंगा
बेकन संख्या की एक सूची 

51
00:03:02,819 --> 00:03:04,240
इसमें सभी अभिनेताओं के साथ, 

52
00:03:04,240 --> 00:03:07,100
और मुझे यह सूची दीजिए और हम आपको दे देंगे
बेकन संख्या  

53
00:03:07,100 --> 00:03:11,870
हर किसी की जो इस फिल्म में है। इसलिए हमें
अब और सिद्धांत चश्मे की जरूरत नहीं है,  

54
00:03:11,870 --> 00:03:16,210
एक्सेल मे वापस चलिए और देखिए कैसे
पायथन कार्य काम करता है परिभाषित करने पर। 

55
00:03:16,210 --> 00:03:19,770
तो एक शैल को शक्तिप्रापक करें , और 
पायथन शैल क्लिक करें

56
00:03:19,770 --> 00:03:24,110
DataNitro में और अब हम कार्य परिभाषित 
कर सकते हैं। 

57
00:03:24,110 --> 00:03:27,630
तो चलिए एक आसान के साथ शुरू करते हैं, हम कहते हैं,  हम 
चाहते हैं एक कार्य 'plusone',

58
00:03:27,630 --> 00:03:32,500
जहां हम कुछ में डालते हैं और परिणाम
होता है वह राशी 

59
00:03:32,500 --> 00:03:36,840
प्लस एक |  तो यह होता है हमारे अपने योग 
कार्य को परिभाषित करने जैसा या अपने स्वयं के 

60
00:03:36,840 --> 00:03:40,640
MIN कार्य | हम में कुछ रख सकते हैं,
और एक परिणाम मिलता है। 

61
00:03:40,640 --> 00:03:43,860
उदाहरण के लिए, अब हम पायथन को अगर पूछें
यह क्या है, 

62
00:03:43,860 --> 00:03:48,000
यह जानता है कि plusone एक कार्य है, और
हम अगर कुछ डाला है, उदाहरण के लिए, हमे मिलता है

63
00:03:48,000 --> 00:03:49,480
5 के plusone 

64
00:03:49,480 --> 00:03:53,940
परिणाम 6 है। इसलिए, यह शायद थोड़ा गूढ़ है  

65
00:03:53,940 --> 00:03:57,250
लेकिन विचार है कि अगर आप अपने खुद के कार्यों को 
परिभाषित करते है 

66
00:03:57,250 --> 00:04:00,940
तो आप क्या ले सकते हैं? 
संख्या X.

67
00:04:00,940 --> 00:04:04,080
और हम क्या वापस कर रहे हैं? यह संख्या X प्लस एक।  

68
00:04:04,080 --> 00:04:06,900
और ये ठीक उसी 
बात है, 

69
00:04:06,900 --> 00:04:10,740
कार्य परिभाषा, जो हमारे बेकन मुद्दे के समाधान के लिए 
हम इस्तेमाल करने जा रहे हैं|

70
00:04:10,740 --> 00:04:14,390
तो चलिए एक और शैल करते हैं और 
एक अन्य कार्य बनाते हैं। 

71
00:04:14,390 --> 00:04:18,260
और आप जानते हैं क्या कार्य , कार्य जो
ब्लैकबोर्ड पर परिभाषित किया गया है। 

72
00:04:18,260 --> 00:04:22,330
हम शुरू कर रहे हैं  AllSteps के साथ | AllSteps है एक
कार्य जो ले जाता है 

73
00:04:22,330 --> 00:04:25,470
एक फिल्म के नाम में और देता है 

74
00:04:25,470 --> 00:04:29,160
उस फिल्म में सभी लोगों के 
बेकन संख्या । 

75
00:04:29,160 --> 00:04:33,510
तो उदाहरण के लिए, 'क्रेजी स्टुपिड लव' के लिए इस कार्य 
का परिणाम होगा एक  

76
00:04:33,510 --> 00:04:37,220
डेश और एक डेश [1--] और। इसलिए हम 
करने जा रहे हैं

77
00:04:37,220 --> 00:04:37,930
 पार

78
00:04:37,930 --> 00:04:42,470
हमारे स्प्रेडशीट में सभी लाइनों और देखें
हमारी फिल्म के लिए एक मैच |

79
00:04:42,470 --> 00:04:45,380
प्रारंभ में, हम पहली पंक्ति के साथ शुरू करते है
निश्चित रूप से हमे नहीं मिला है 

80
00:04:45,380 --> 00:04:48,900
अभी तक मेल  और फिर  'for' 

81
00:04:48,900 --> 00:04:51,639
वाक्य रचना कार्य से, यह एक पाइथन बात है  

82
00:04:51,639 --> 00:04:55,490
हम सब कुछ उपयोग कर सकते हैं; हम पता कर सकते हैं
हर पंक्ति। 

83
00:04:55,490 --> 00:04:59,600
इसलिए दूसरी लाइन पर शुरू करे और चले
बारहवें लाइन तक 

84
00:04:59,600 --> 00:05:02,290
और हर पंक्ति में हम देखेंगे 

85
00:05:02,290 --> 00:05:05,470
दूसरा कॉलम के मूल्य, इसलिए

86
00:05:05,470 --> 00:05:08,449
जिस पंक्ति में हम हैं,  जो है 'i' , हमारे 
चर कारक 

87
00:05:08,449 --> 00:05:13,300
पाश के लिए, दूसरे कॉलम में है,
हम उस बात का मूल्य 

88
00:05:13,300 --> 00:05:14,440
निरीक्षण कर रहे हैं, 

89
00:05:14,440 --> 00:05:17,870
हम अपने कार्य में डाल दिया है उस फिल्म के बराबर है। 
तो,

90
00:05:17,870 --> 00:05:21,350
इस यह आपको SUMIF कार्य का
याद दिलाना चाहिए , 

91
00:05:21,350 --> 00:05:24,370
हम लाइनों का एक गुच्छा संक्षेप रहे हैं जहां यदि 
केवल यह मैच होता है

92
00:05:24,370 --> 00:05:28,850
एक निश्चित मूल्य के साथ। वैसे, यहाँ हम कब्जा रहे हैं
एक साथ मूल्यों का एक टुकड़ा यदि 

93
00:05:28,850 --> 00:05:33,650
केवल यह एक निश्चित मान से मेल खाता है। तो
हम हमारी सूची में क्या जोड़ रहे हैं?
  
94
00:05:33,650 --> 00:05:37,270
फिल्म का नाम नहीं,  लेकिन
ठीक उसके बगल का कॉलम।  तो पंक्ति पर सेल में 

95
00:05:37,270 --> 00:05:40,960
हम निरीक्षण कर रहे हैं
तीसरे कॉलम।

96
00:05:40,960 --> 00:05:45,010
अगर एक मैच है, तो इसे जोड़े हमारे सूची में
संलग्न कार्य के साथ । 

97
00:05:45,010 --> 00:05:49,550
अगर  हम समाप्त कर दिया है और, पंक्तियों के सभी 
का निरीक्षण किया गया है, फिर, 

98
00:05:49,550 --> 00:05:54,330
हम वापस चरणों की सूची में आते हैं। तो
अपने आप को याद दिलाना 

99
00:05:54,330 --> 00:05:58,130
plusone की तरह, पाँच डाले
तो छह मिला, यहा  है, 

100
00:05:58,130 --> 00:06:02,729
हम एक सूची वापस पाने के लिए एक फिल्म डाल दिया। तो
हम इस का परिणाम रख सकते हैं 

101
00:06:02,729 --> 00:06:03,869
एक चर कारक में |

102
00:06:04,380 --> 00:06:07,860
चलिए कोशिश करते हैं। फिल्म 'क्रेजी 
स्टुपिड लव' के लिए

103
00:06:07,870 --> 00:06:12,370
हम 'क्रेजी स्टुपिड लव' के कदम नामक एक चर बना रहे हैं
[StepsCSL]

104
00:06:12,370 --> 00:06:15,150
और हम उस में डालने जा रहे हैं
चर कारक

105
00:06:15,150 --> 00:06:18,360
हमारे कार्य का परिणाम है।  यह AllSteps

106
00:06:18,360 --> 00:06:21,639
'क्रेजी स्टुपिड लव' पर लागू होता है। लेकिन यहाँ हमे
चाहिए 

107
00:06:21,639 --> 00:06:26,180
उद्धरण ["] जोड़ें क्योंकि यह एक स्ट्रिंग, एक पाठ
मूल्य है। 

108
00:06:26,180 --> 00:06:28,180
तो हम दर्ज मारा और अब मूल्य  

109
00:06:28,180 --> 00:06:32,010
हमारे चर में बचाया और अगर हम पूछते है 
पायथन क्या है 

110
00:06:32,010 --> 00:06:35,290
इस चर? परिणाम हो जाएगा एक 
डेश डेश  [1--],

111
00:06:35,290 --> 00:06:38,229
और यह है बिलकुल जो हम चाहते है, है ना ?
परिणाम 

112
00:06:38,229 --> 00:06:42,240
'क्रेजी स्टुपिड लव' के सूची में एक डेश डेश है [1--] |

113
00:06:42,240 --> 00:06:45,400
तो हमारी समस्या के पहले भाग का  
हल हो गया है, 

114
00:06:45,400 --> 00:06:48,760
लेकिन यह अभी भी, पायथन दुनिया में हल है 

115
00:06:48,760 --> 00:06:50,580
और हम वापस इस मूल्य चाहेंगे 

116
00:06:50,580 --> 00:06:54,479
स्प्रेडशीट दुनिया में। तो हम यह कर सकते हैं,
हम पहले देखा है कि हम संपादित कर सकते हैं  

117
00:06:54,479 --> 00:06:55,740
स्प्रेडशीट 

118
00:06:55,740 --> 00:06:59,389
पायथन से, हम कह सकते हैं: सेल  

119
00:06:59,389 --> 00:07:03,240
चौथे पंक्ति के दूसरे कॉलम में । उफ़, 
माफ करना  

120
00:07:03,240 --> 00:07:07,580
दूसरे पंक्ति के चौथे कॉलम में होना चाहिए
मूल्य जो है हमारे 

121
00:07:07,580 --> 00:07:08,430
चर कारक है|

122
00:07:08,430 --> 00:07:13,210
और अगर अब दर्ज करें हम तुरंत, 
मूल्य अद्यतन होता है । 

123
00:07:13,210 --> 00:07:18,350
आप यहाँ देख सकते हैं पायथन 
एक सेल में एक पूरी सूची डाल दिया। 

124
00:07:18,940 --> 00:07:22,440
यदि आप Excel के साथ ऐसा करने के लिए चाहते हैं
सरणी सूत्र का उपयोग करने की ज़रूरत हैं

125
00:07:22,449 --> 00:07:28,120
हम पिछले सप्ताह के वीडियो में देखा है |
एक्सेल, एक सूची एक सरणी नहीं डाल सकते हैं 

126
00:07:28,120 --> 00:07:32,449
एक सेल में, जगह देने करने की ज़रूरत हैं 
सभी कोशिकाओं को भरने के लिए।  

127
00:07:32,449 --> 00:07:35,620
पायथन के साथ ऐसा नहीं है हम 
अभी पूरी सूची ले सकते हैं  

128
00:07:35,620 --> 00:07:39,199
और एक सेल में डाल सकते हैं, जो बहुत कुछ 
अधिक सुविधाजनक है ,  

129
00:07:39,199 --> 00:07:42,959
आप सूची कार्य का बहुत उपयोग कर रहे हैं
जैसे हम कर रहे हैं। 

130
00:07:43,630 --> 00:07:47,700
तो चलिए हमारी समस्या के दूसरी छमाही जारी करे |  
मैंने अब 

131
00:07:47,710 --> 00:07:50,289
शैल साफ कर दिया, हालांकि, हम अभी भी

132
00:07:50,289 --> 00:07:53,400
वहाँ सभी कार्यों को देख सकते हैं। 
पायथन उन्हें याद किया है, 

133
00:07:53,400 --> 00:07:57,500
इसलिए अभी भी AllSteps कार्य है
और हम अब एक नया एक बनाने के लिए जा रहे हैं। 

134
00:07:57,500 --> 00:08:01,310
हम बनाने के लिए जा रहे हैं  NextStep कार्य|
हम ब्लैकबोर्ड पर देखा है, यह है 

135
00:08:01,310 --> 00:08:03,120
एक कार्य जो सूची में लेता है 

136
00:08:03,120 --> 00:08:06,350
जो हम अभी बनाया है और 

137
00:08:06,350 --> 00:08:10,259
अगले मान देता है | तो हम करने जा रहे हैं
चरणों को पार, 

138
00:08:10,259 --> 00:08:13,440
एक डेश डेश  [1--] इस मामले में, 
जैसे हम

139
00:08:13,440 --> 00:08:16,440
पिछले उदाहरण में पंक्तियों तय की। 

140
00:08:16,440 --> 00:08:21,470
इसलिए फिर से, 'for' का उपयोग किया जाता है, एक पायथन निर्माण
कि पाशन के लिए प्रयोग किया जाता है, 

141
00:08:21,470 --> 00:08:24,919
और हम सभी तत्वों का निरीक्षण कर रहे हैं
हमारे चरणों की सूची में । 

142
00:08:24,919 --> 00:08:28,639
हम डैश नहीं देखते है तो, 
एक कि तरह, 

143
00:08:28,639 --> 00:08:32,589
परिणाम सही है, पता है क्या? फिर
परिणाम यह है जो मूल्य होना चाहिए 

144
00:08:32,589 --> 00:08:35,300
प्लस एक | हम देखते हैं  

145
00:08:35,300 --> 00:08:39,189
असामान्य कुछ तो , यह विस्मयबोधक चिह्न वाक्य रचना है, 

146
00:08:39,189 --> 00:08:42,829
तो प्लस एक वापसी है वास्तव में, पता है। 

147
00:08:42,829 --> 00:08:44,839
लेकिन, हम डैश देखते हैं तो? 

148
00:08:44,839 --> 00:08:47,720
हमे क्या वापस करना है पता नहीं है, क्योंकि 
अगली पंक्ति 

149
00:08:47,720 --> 00:08:51,959
डैश हो सकता है या यह एक हो सकता है। 
हम डैश देखते हैं तो हम नहीं जानते हैं

150
00:08:51,959 --> 00:08:52,949
अभी तक, 

151
00:08:52,949 --> 00:08:56,040
हालांकि, हम केवल डैश देखा है और अगर
हम नहीं वापस नहीं किया हैं 

152
00:08:56,040 --> 00:08:58,679
अभी तक कुछ भी, फिर हम वापस करने जा रहे हैं  

153
00:08:58,679 --> 00:09:00,790
डैश, क्योंकि कि यह वास्तव में वास्तव व्यक्त करता है 

154
00:09:00,790 --> 00:09:01,610
हम क्या चाहते हैं। 

155
00:09:01,610 --> 00:09:04,670
सब कुछ डैश है, तो परिणाम होगा
डैश | 

156
00:09:04,670 --> 00:09:09,679
हमारे साथ एक कार्य है, यह परिभाषित है, 
अभी भी हमारे चर, 

157
00:09:09,679 --> 00:09:12,499
और एक डेश है  [1--],  हम पिछले एक स्लाइड में बनाया है।
तो

158
00:09:12,499 --> 00:09:14,569
अब हम उपयोग कर सकते हैं, हम यह कह सकते हैं 

159
00:09:14,569 --> 00:09:15,860
कार्य 

160
00:09:15,860 --> 00:09:19,660
चर पर काम करते हैं और यह इस तरह है: 

161
00:09:19,660 --> 00:09:22,839
plusone की तरह, हम बस लगाया
चर में 

162
00:09:22,839 --> 00:09:27,829
और हमे परिणाम मिलता है। हम डाल दिया तो अगर
सूची में, हमारे परिणाम है, 2

163
00:09:27,829 --> 00:09:29,589
जो वास्तव में हम चाहते थे। 

164
00:09:29,589 --> 00:09:33,740
तीन अभिनेताओं के साथ एक फिल्म है, जहाँ एक
केविन बेकन है 

165
00:09:33,740 --> 00:09:38,089
और अन्य दो एक अपरिभाषित 
बेकन संख्या है, तो इस फिल्म को दे देंगे  

166
00:09:38,089 --> 00:09:39,170
बेकन संख्या 

167
00:09:39,170 --> 00:09:42,150
2, उस में निभाई है हर किसी के लिए।  

168
00:09:43,860 --> 00:09:49,399
तो, अब तक हम केवल पायथन का शेल उपयोग करते 
हुए गया है

169
00:09:49,399 --> 00:09:52,720
लेकिन हम संपादक का उपयोग भी
कर सकते है।

170
00:09:52,720 --> 00:09:56,980
तो फिर हमें टाइप करने की जरूरत नहीं है
पागल छोटी लाइन पर, 

171
00:09:56,980 --> 00:10:02,569
हम सिर्फ एक पाठ फ़ाइल में उन्हें टाइप कर सकते हैं और
आप एक स्प्रेडशीट बचाने के रूप में, इसे बचा सकते हैं । 

172
00:10:02,569 --> 00:10:07,059
आप भी इन पायथन फ़ाइलें सहेज सकते हैं
और ज़ाहिर है कि यह बहुत आसान है 

173
00:10:07,059 --> 00:10:10,100
टाइपिंग की तुलना में आपने क्योंकि एक बार  
है शेल बंद कर दिया 

174
00:10:10,100 --> 00:10:14,679
आप परिभाषित किया है कि सभी कार्य
चले गए। इसलिए हम सब कुछ डाल दिया  

175
00:10:14,679 --> 00:10:18,589
एक ही कार्य परिभाषा, अब एक फाइल में।

176
00:10:18,589 --> 00:10:23,019
और उस फ़ाइल से हम इसे 
स्प्रेडशीट में वापस डाल दिया। 

177
00:10:23,019 --> 00:10:26,170
तो फिर, हम एक पाश के लिए उपयोग करने जा रहे हैं 

178
00:10:26,170 --> 00:10:28,399
और हम करने जा रहे हैं सभी लाइनों 

179
00:10:28,399 --> 00:10:33,019
मुद्रित, हम, यह आसान बनाने के लिए, मुद्रित
पंक्ति की संख्या मुद्रित करने के लिए । 

180
00:10:33,019 --> 00:10:37,509
अभी तो आप यह कैसे होता हैं देख सकते हैं। तो
'i' के मूल्य कहना है  

181
00:10:37,509 --> 00:10:40,670
और 4 बस होने जा रहा है 'i' 

182
00:10:40,670 --> 00:10:44,449
हम बनाया तो, फ़ाइल को बचाया है
और हम चलाने मारा, 

183
00:10:44,449 --> 00:10:48,369
* ललकार * आप एक बार में देखें

184
00:10:48,369 --> 00:10:51,689
'i' वहाँ रहे हैं, लेकिन मैं एक गलती की है |

185
00:10:51,689 --> 00:10:55,319
मैं "12" सब समय का उपयोग कर रही थी और मैं
भूल गया कि 

186
00:10:55,319 --> 00:10:59,919
यह "" 12 "जब तक है और जब तक नहीं और
12 "भी शामिल है। तो, यह वास्तव में होना चाहिए  

187
00:10:59,920 --> 00:11:02,019
13 और इसलिए कार्य भी | 

188
00:11:02,019 --> 00:11:05,269
तो, अब हम 13 तक चला गया है और 
आप देखे सभी 

189
00:11:05,269 --> 00:11:06,769
पंक्तियाँ भर रहे हैं |

190
00:11:06,769 --> 00:11:09,850
लेकिन, निश्चित रूप से, हम 'i' वहाँ नहीं करना चाहते
हमारे करना चाहते हैं 

191
00:11:09,850 --> 00:11:13,709
उन दो कार्यों का परिणाम है
जो परिभाषित किया गया है। 

192
00:11:13,709 --> 00:11:17,660
तो चलिए फिर से AllSteps साथ शुरू करते हैं,
इसलिए हम लेते हैं,

193
00:11:17,660 --> 00:11:21,509
दूसरा कॉलम से मूल्य। 

194
00:11:21,509 --> 00:11:25,050
तो अब हम हमारे साथ फिल्में हैं, वह है
जरूरत पहला कदम में,

195
00:11:25,050 --> 00:11:28,189
क्योंकि फिल्म का नाम  
हम में डालने जा रहे हैं 

196
00:11:28,189 --> 00:11:33,189
AllSteps कार्यों में। तो ये हम चले,
AllSteps। 

197
00:11:33,189 --> 00:11:38,279
इसे में, हम अब स्ट्रिंग का उपयोग, नहीं कर रहे हैं, लेकिन 
हमे स्प्रेडशीट से मूल्य मिलता है। 

198
00:11:38,279 --> 00:11:41,319
यह अच्छा है, है ना ? तो अब हर फिल्म के लिए 

199
00:11:41,319 --> 00:11:45,889
हम कर रहे हैं कि सभी अभिनेताओं की एक सूची 
उस में है और सिर्फ डालने की आवश्यकता है 

200
00:11:45,889 --> 00:11:47,160
NextStep 

201
00:11:47,160 --> 00:11:50,879
कार्यों  में | हम चलते हैं वहाँ, हम डाल दिया
सूची, 

202
00:11:50,879 --> 00:11:53,730
अब हम रन हिट किया ।  देखिए उस ओर !

203
00:11:53,730 --> 00:11:58,049
परिणाम बिल्कुल एक ही है 
प्राप्त परिणाम से

204
00:11:58,049 --> 00:12:02,209
सभी VLOOKUPs और SUMIFs साथ,
लेकिन इसके बजाय उपयोग कर के 

205
00:12:02,209 --> 00:12:05,869
बहुत कुछ सूत्रों, हम सिर्फ इस्तेमाल कर रहे हैं एक थोड़ा सा
कोड का   

206
00:12:05,869 --> 00:12:09,439
मूल्यों की गणना करने के लिए। क्यों यह 
कोड 

207
00:12:09,439 --> 00:12:13,429
VLOOKUP की तुलना में आसान हैं? क्योंकि हम
निर्माणों का उपयोग कर रहे हैं

208
00:12:13,429 --> 00:12:18,969
एक सूची और एक पाश में, जो
स्प्रेडशीट के लिए प्राकृतिक नहीं है। 

209
00:12:18,969 --> 00:12:23,160
ये बहुत आम अनुबंध प्रोग्रामिंग में, हालांकि,  अगर
आप करना चाहते हैं 

210
00:12:23,160 --> 00:12:24,089
कुछ इस तरह

211
00:12:24,089 --> 00:12:29,009
मेरे स्प्रेडशीट के सभी लाइनों का निरीक्षण
और एक खास मामले में कुछ करना है, 

212
00:12:29,009 --> 00:12:32,779
यह के लिए स्प्रेडशीट्स नहीं
बने हैं। वे गणना के लिए बना हैं  

213
00:12:32,779 --> 00:12:36,910
और वास्तव में मूल्यों निरीक्षण 
और फिर उन्हें बदल के लिए नहीं  

214
00:12:36,910 --> 00:12:41,910
लगातार | इसलिए इन स्थितियों हैं जहां 
प्रोग्रामिंग भाषा 

215
00:12:41,910 --> 00:12:43,910
सिर्फ आसान कर रहे हैं | 

216
00:12:45,520 --> 00:12:48,799
तो हम क्या कर सकते हैं
अब, हमे छुटकारा मिल सकता है, 

217
00:12:48,799 --> 00:12:53,379
हमे उन बदसूरत SUMIFs की जरूरत नहीं है
अब और। हम उनका चयन कर सकते हैं

218
00:12:53,380 --> 00:12:58,470
और हम इसे समाप्त कर रहे हैं, चले जाओ, हम नहीं चाहते हैं
अब और आपको देखना । और यहाँ,   

219
00:12:58,470 --> 00:13:02,829
मैं VLOOKUPs वापस डाल दिया है चुपके से, जब
आप नहीं देख रहे थे 

220
00:13:02,829 --> 00:13:07,149
आप इसे एक बार दिखाने के लिए हमे इसे से भी छुटकारा मिलता है। 
इसलिए हमें जरूरत नहीं है  

221
00:13:07,149 --> 00:13:10,799
अब और उन मूल्यों।  लेकिन हमे नहीं छुटकारा पाने की
जरूरत है
 
222
00:13:10,799 --> 00:13:14,509
सब फार्मूले से   -  उनमें से कुछ अभी भी ठीक हैं |

223
00:13:14,509 --> 00:13:17,649
उदाहरण के लिए VLOOKUP, पहले
हम प्रयोग किया है, 

224
00:13:17,649 --> 00:13:21,009
यह एक साधारण कार्य है, ठीक है
इसका इस्तेमाल करें। 

225
00:13:21,009 --> 00:13:24,869
लेकिन कुछ भागों, बदसूरत भागों, हम 
अब हटाया हैं

226
00:13:24,869 --> 00:13:28,629
और इस छोटे से पायथन कोड से 
उन्हें बदल दिया |
 
227
00:13:28,629 --> 00:13:31,689
और इस वीडियो में मैं केवल दूसरा 
कदम किया

228
00:13:31,689 --> 00:13:36,129
आपकी चुनौती सप्ताह के बाकी के लिए 
इस पायथन कार्यक्रम का विस्तार करने के लिए है

229
00:13:36,129 --> 00:13:40,019
ताकि यह सिर्फ दो चरणों के लिए नहीं  काम करता है, 
लेकिन यह काम करता है 

230
00:13:40,019 --> 00:13:44,529
असीमित संख्या की कदम के लिए, या हम कहते हैं
कम से कम 12 तक, क्योंकि यह है  

231
00:13:44,529 --> 00:13:46,529
उच्चतम बेकन संख्या | 

232
00:13:46,529 --> 00:13:49,609
होमवर्क के साथ अच्छी किस्मत और मिलते हैं
अगले सप्ताह! 

