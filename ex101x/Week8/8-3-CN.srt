100:00:01,160 --> 00:00:04,200现在，我们面临一个图形问题，200:00:04,200 --> 00:00:07,490而我们也可以开始使用不同的工具了, 所以不再需要300:00:07,490 --> 00:00:13,099通用的工具。 电子表格或 Python就好比一把瑞士军刀。400:00:13,099 --> 00:00:17,750它们可以做任何你想要做的事，你可以 借助它们做预算和规划，500:00:17,750 --> 00:00:22,970或解决类似Bacon数的问题。 但现在我们可以使用一款非常专业的图形工具，600:00:22,970 --> 00:00:24,810它非常700:00:24,810 --> 00:00:27,740近似于你吃蜗牛时所使用的钳子。 它们800:00:27,740 --> 00:00:32,730仅在你吃蜗牛时非常有用， 但在其他方面，例如900:00:32,730 --> 00:00:35,649吃意大利面或 米饭时却毫无用武之地，1000:00:35,649 --> 00:00:40,850也就是说他们是一款非常专门化的工具。 而图形工具也是如此，1100:00:40,850 --> 00:00:44,420我们要 使用的图形工具，被称为Neo4j。1200:00:44,440 --> 00:00:48,079它是一个图形数据库 ， 其名称已经透露了该工具的功能，1300:00:48,079 --> 00:00:51,670它确实是用来存储和分析图表的。1400:00:51,670 --> 00:00:54,989这款免费提供的工具非常容易获得，如果你下载了Neo4j，1500:00:54,989 --> 00:00:57,340它可以被应用于很多不同的平台。1600:00:57,340 --> 00:01:00,890如果你下载并启动它， 这将是你看到的。1700:01:00,890 --> 00:01:04,360就是这个小小的操作界面，我们要拿它做什么呢？1800:01:04,360 --> 00:01:07,790我们首先要做就是从我们的文件系统里选择一个文件夹，1900:01:07,790 --> 00:01:12,430而我们要用它来保存数据库 ，2000:01:12,430 --> 00:01:13,260您只需选择一个这样普通的空白文件夹，2100:01:13,260 --> 00:01:18,800然后按下开始 ，将会得到一个2200:01:18,800 --> 00:01:22,870含有链接的绿色操作窗口。 如果你点击它，你将会被带到你的网页浏览器（就是2300:01:22,870 --> 00:01:25,220一般的浏览器，如火狐或Chrome），2400:01:25,220 --> 00:01:32,220它将启动（您的浏览器），之后你便会 看到Neo4j。2500:01:32,530 --> 00:01:33,820一开始你并不能立即明确在此接下来要进行的事情。2600:01:33,820 --> 00:01:38,000首先，让我们将Bacon数据2700:01:38,000 --> 00:01:41,250导入数据库 。 所以我们回到电子表格2800:01:41,250 --> 00:01:45,040并且必须将电子表格保存为CSV文件 ，2900:01:45,040 --> 00:01:50,380即“逗号分隔值”文件 。 这是一种Neo4j和许多其它工具3000:01:50,380 --> 00:01:54,360可以轻松读取的格式。 也许之前你已经做过这样的步骤，即点击“另存为”，然后选择你3100:01:54,360 --> 00:01:56,850要保存CSV文件的路径，3200:01:56,850 --> 00:02:01,280输入一个文件名，然后从“另存为”的 下拉列表中3300:02:01,280 --> 00:02:04,990选择CSV。 这就是逗号分隔值文件啦。3400:02:04,990 --> 00:02:09,600我们发现文件包含太多点符，3500:02:09,600 --> 00:02:12,220删除这些点符，然后点击“保存”。3600:02:12,220 --> 00:02:15,230而现在我们只保存了这个工作表 ，[我们] 可以3700:02:15,230 --> 00:02:17,810将其保存为CSV格式。但 Excel警告我们：3800:02:17,810 --> 00:02:21,030只能保存一个工作表 ，你将失去所有数据透视表。3900:02:21,030 --> 00:02:25,250我们知道这点，但没有关系，我们想要将其保存为CSV文件 。4000:02:25,250 --> 00:02:27,700所以如果我们现在打开该CSV 文件， 4100:02:27,700 --> 00:02:31,860便会得到这个。 这是用记事本或其他任何文本编辑器打开4200:02:31,860 --> 00:02:35,720CSV文件看起来的样子。 在该例子中你的第一行， 4300:02:35,730 --> 00:02:38,850也就是该电子表格的第一列是电影4400:02:38,850 --> 00:02:42,310然后你在电子表格里得到代表所有行数的一行值 。4500:02:42,310 --> 00:02:45,990当然，列是以 逗号分隔开的，4600:02:45,990 --> 00:02:50,460因为它是一种“逗号分隔值”格式。 所以，我们有了这个数据。4700:02:50,460 --> 00:02:54,090现在我们需要把这个数据导入Neo4j。4800:02:54,090 --> 00:02:58,450因此，让我们回到Neo4j，找到我们放在这里的CSV 文件4900:02:58,450 --> 00:03:03,040我们不能只是选择并且载入数据，5000:03:03,040 --> 00:03:07,819复制粘贴是不可行的。 我们必须使用一种特殊的指令，叫做加载CSV(LOAD CSV)。5100:03:07,819 --> 00:03:12,980因此，我们将该指令输入Neo4j中 5200:03:12,980 --> 00:03:15,150从我刚才保存该CSV文件的路径5300:03:15,150 --> 00:03:19,410加载CSV，5400:03:19,410 --> 00:03:22,810然后针对该CSV文件中的每一行5500:03:22,810 --> 00:03:26,810我们均要进行一项特定的 操作。 那么这里是5600:03:26,810 --> 00:03:27,680该CSV文件的位置，5700:03:27,680 --> 00:03:31,130我们将其作为一行来打开，5800:03:31,130 --> 00:03:34,400这意味着我们要对该电子表格 和5900:03:34,400 --> 00:03:37,950CSV文件进行迭代，并且每一排6000:03:37,950 --> 00:03:41,540被称为行。 这很像 Python 中的for-loop，在那里有一个6100:03:41,540 --> 00:03:45,930迭代程序“i”，首先产生为1 的值， 然后接着是2和3，6200:03:45,930 --> 00:03:49,430这也是发生在行中的现象。 所以我们应该6300:03:49,430 --> 00:03:53,770针对每一行做些什么呢？ 我们将要创建的内容是电影，6400:03:53,770 --> 00:03:57,069我们将创建一个电影，电影的名称6500:03:57,069 --> 00:04:02,209为“row.movie”。 这是第一列，在这种情况下，它也是我们6600:04:02,209 --> 00:04:04,540CSV文件 的唯一列。 因此，我们可以通过6700:04:04,540 --> 00:04:07,910点击播放按钮来运行该文件了，然后 Neo4j 提示：好了，6800:04:07,910 --> 00:04:12,260我创建了四个节点。 尚未得知6900:04:12,260 --> 00:04:17,769发生了什么，但确有事情发生了，因为我们已经创建了四个节点。7000:04:17,769 --> 00:04:20,310所以，我们现在能做的，就是把这些节点拎出来。7100:04:20,310 --> 00:04:24,190我不打算解释这种语言的全部语法，7200:04:24,190 --> 00:04:27,520但顺便提一下，这种语言被称为Cypher， 我只是要7300:04:27,520 --> 00:04:32,030将该例子里你所需要知道的几点展示给你，但我们会把链接放到网上7400:04:32,030 --> 00:04:36,020背景材料中，在那里你可以学到关于Cypher的所有东西。7500:04:36,020 --> 00:04:40,790那么我们如何把这些节点拎出来？ 有一个特殊的指令称为MATCH7600:04:40,790 --> 00:04:44,730而这指令将能寻找所有的节点。 所以在该例子里，我们说：7700:04:44,730 --> 00:04:48,680我们只匹配一个节点'N'，它可以是任何类型的节点，7800:04:48,680 --> 00:04:51,510然后将其返回给我们。 现在我们看到四个7900:04:51,510 --> 00:04:53,700我们已经输入8000:04:53,700 --> 00:04:54,400数据库 的节点，8100:04:54,400 --> 00:04:59,260我们看到他们是电影，并且他们有包含在CSV文件里的标签。8200:04:59,260 --> 00:05:03,000我们可以改变一点点布局， 我们可以说该标签8300:05:03,000 --> 00:05:07,060必须是电影的名称，并且我们可以操控节点的大小。8400:05:07,060 --> 00:05:10,440所以很容易地看出我们的确 有4部电影8500:05:10,440 --> 00:05:15,000存在于我们的CSV文件里的Neo4j 数据库中。8600:05:15,000 --> 00:05:17,000它们就在数据库里，但你同时也可以看到8700:05:17,000 --> 00:05:19,160这是一个制作图形的工具。8800:05:19,160 --> 00:05:22,590如果我只是说：给我数据库里的所有东西，8900:05:22,590 --> 00:05:26,430那么这个中立、正常的格式不是9000:05:26,430 --> 00:05:29,210一个你能够从正常数据库里面得到的列表。9100:05:29,210 --> 00:05:30,440 它是我们的那些小点符，9200:05:30,440 --> 00:05:34,360即我们数据库里的节点。 这说明了我们的确正在此使用图形9300:05:34,360 --> 00:05:35,780数据库，而它是用来9400:05:35,780 --> 00:05:39,770优化节点的工具。 现在我们9500:05:39,770 --> 00:05:41,680还需要做的是9600:05:41,680 --> 00:05:42,860把演员也放进去。9700:05:42,860 --> 00:05:46,350我们也可以再次使用LOAD CSV 指令9800:05:46,350 --> 00:05:50,070而现在我们不再创建电影，我们要创建的是演员。 并且我们9900:05:50,070 --> 00:05:54,240真的是以“创建一个演员”的形式来做这件事，我们 不会增加一个命名为10000:05:54,240 --> 00:05:57,810“这是一个演员类型”的标签，不是这样，我们真的是说“创建一个演员”。10100:05:57,810 --> 00:06:01,530这听起来也许有点含义模糊的意味， 但还是让我为你展示它看起来如何，10200:06:01,530 --> 00:06:03,960我把所有的节点展示给你看你就一目了然了。10300:06:03,960 --> 00:06:06,820起初，这一切看起来都不错，你可以看到10400:06:06,820 --> 00:06:09,479确实有些是演员，有些是电影。10500:06:09,479 --> 00:06:13,699但是我们能做的是，再次尝试改变布局。 我们可以这么说：10600:06:13,699 --> 00:06:17,000我们要把电影改成绿色的，然后你看10700:06:17,000 --> 00:06:21,979所有电影的节点就变成绿色了，并且我们也能在演员部分做同样的改变。10800:06:21,979 --> 00:06:26,120比方说，我们希望演员是粉红色的， 而现在你可以看到是10900:06:26,120 --> 00:06:29,690我们的数据库里有两种不同类型的节点，11000:06:29,690 --> 00:06:32,050它们分别是电影和演员。11100:06:33,260 --> 00:06:34,960所以，下一步11200:06:34,960 --> 00:06:38,430我们需要执行的是：将我们数据库中现有电影和演员 11300:06:38,430 --> 00:06:42,050做一种连接。 所以，我们再一次11400:06:42,050 --> 00:06:47,320以CSV文件的格式对我们第三个电子表格的工作表进行保存，如今在该文件里我们有两个11500:06:47,320 --> 00:06:47,900列。11600:06:47,900 --> 00:06:52,270一个叫做“全名”，而另一个 叫做“电影”。11700:06:52,270 --> 00:06:55,040并且我们还要再一次使用MATCH 指令11800:06:55,040 --> 00:07:00,430首先，我们将要加载CSV文件，作为来自该文件中的一行，现在我们已经掌握了这一步， 11900:07:00,430 --> 00:07:04,000但我们接下来要对每一列进行匹配， 第一项12000:07:04,000 --> 00:07:08,780与演员匹配，第二项与电影匹配，这就是它看起来的样子。12100:07:09,080 --> 00:07:11,660因此我们说MATCH ...12200:07:12,509 --> 00:07:15,590是的，我们说MATCH ...12300:07:15,590 --> 00:07:19,580在这里，我们说MATCH，也就是指我们要将12400:07:19,580 --> 00:07:23,690命名为'A'的演员进行匹配，那么我们要用什么 与它匹配呢？12500:07:23,690 --> 00:07:27,389嗯，是名字， 是演员的全名，它必须等同于12600:07:27,389 --> 00:07:32,740我们 CSV文件里该行中的名字 。12700:07:32,740 --> 00:07:36,680所以，这也叫全名，那么在 第一种情况下，我们要用来12800:07:36,680 --> 00:07:39,280做首个连接的演员是凯文· 培根，12900:07:39,280 --> 00:07:42,840连接对象是电影《疯狂盲目的爱情》 。 因此，这第一个匹配行13000:07:42,840 --> 00:07:47,930将要搜索第一行的演员，而现在我要做的第二个匹配13100:07:47,930 --> 00:07:49,13913200:07:49,139 --> 00:07:54,740是这样的：我正在对电影进行匹配，而电影的名称必须等同于13300:07:54,740 --> 00:07:55,650我CSV文件中的电影列，13400:07:55,650 --> 00:07:59,669即逗号后的第二列。13500:07:59,669 --> 00:08:03,020那么，这前面两样东西要做的就是找到演员13600:08:03,020 --> 00:08:06,870和电影。 所以，如果有了这些之后， 我需要做的就是13700:08:06,870 --> 00:08:10,460在它们之间创建一种连接，我可以利用CREATE来完成。13800:08:10,460 --> 00:08:13,550正如我所说的“创建一个演员”和 “创建一个电影”，13900:08:13,550 --> 00:08:17,919我现在从“A”（演员）创建一个链接，14000:08:17,919 --> 00:08:20,820到“M”（电影），并且我给该连接14100:08:20,820 --> 00:08:23,440命名为“acted”，所以就形成了14200:08:23,440 --> 00:08:27,380“A acted in M”，即 凯文·培根演过14300:08:27,380 --> 00:08:30,960《疯狂盲目的爱情》 。 如果我执行此 CREATE，14400:08:30,960 --> 00:08:36,029Neo4j则会再次提示：OK，我已经创建了一堆关联。14500:08:36,029 --> 00:08:39,729因此，让我们来看看它实际上的直观形象是怎样的。14600:08:39,729 --> 00:08:41,469如果我依旧只是使用14700:08:41,469 --> 00:08:43,879“给我展示所有的节点”，那么我会立即得到一个图形。14800:08:43,879 --> 00:08:47,389所以，如果我只是载入我的数据 ，然后14900:08:47,389 --> 00:08:48,850对Neo4j下指令：15000:08:48,850 --> 00:08:53,689给我数据，这就是我所得到的。 它立刻以图形的形式将其形象化，15100:08:53,689 --> 00:08:57,920并且你可以自然看出，凯文·培根与朱丽安·摩尔15200:08:57,920 --> 00:08:59,399一同演出了《疯狂盲目的爱情》15300:08:59,399 --> 00:09:03,119。 这一切都在图里，而且看起来非常像15400:09:03,119 --> 00:09:06,550我们在之前的视频中于15500:09:06,550 --> 00:09:07,410电子表格上绘制的图，15600:09:07,410 --> 00:09:13,089我们立即就得到一个图行。 所以，我们，15700:09:13,089 --> 00:09:13,670现在的呈现方式是正确的，15800:09:13,670 --> 00:09:16,790不过我们当然还是想要执行15900:09:16,790 --> 00:09:22,550Bacon数的计算。因此，让我为你展示如何使用Neo4j进行这一步 。16000:09:22,550 --> 00:09:25,139我们想要做的就是16100:09:25,139 --> 00:09:29,189通过该图形计算出一个路径，即类似于我们处理16200:09:29,189 --> 00:09:31,600代尔夫特、鹿特丹、格罗宁根时的步数，而现在我们要计算的是16300:09:31,600 --> 00:09:33,209从凯文·培根16400:09:33,209 --> 00:09:37,769到朱丽安·摩尔的步数。 因此，我们再次进行匹配， 我们开始调查数据库，但现在16500:09:37,769 --> 00:09:40,100我们要寻找的并非一个节点，我们寻找的是16600:09:40,100 --> 00:09:43,679一条路径，它通过来自一名16700:09:43,679 --> 00:09:47,369叫做凯文·培根的演员的节点到另一位16800:09:47,369 --> 00:09:50,639没有特定名称的演员的节点。 我们不知道该名称以及16900:09:50,639 --> 00:09:55,519该路径应该是什么样子的？ 但它必须是两个分离度，17000:09:55,519 --> 00:09:58,819一位演员，一部电影，另一位演员。 而17100:09:58,819 --> 00:09:59,899我们想要得到的结果是什么？17200:09:59,899 --> 00:10:03,929如果我们发现了从凯文· 培根到另一个演员这样的路径，17300:10:03,929 --> 00:10:08,139那么我们就想拥有那个演员的名称，如果我们执行匹配，17400:10:08,139 --> 00:10:12,189我们实际上就得到所有Bacon数为2的演员，17500:10:12,189 --> 00:10:16,420也就是说他们距离凯文·培根一个分离度，或在17600:10:16,420 --> 00:10:19,429该视觉化图形里他们之间距离2个分离度。 我们可以 17700:10:19,429 --> 00:10:24,170针对每一位Bacon数为3的演员来进行同样的操作， 因为那样的话，我们需要四个分离度。17800:10:24,170 --> 00:10:27,129这方法有用。 使用 Neo4j来执行这方法很简单。17900:10:27,129 --> 00:10:31,369我们这里遇到的唯一的问题是， 斯嘉丽·约翰逊18000:10:31,369 --> 00:10:36,019出现了两次，因为我们有两种方式可以从凯文·培根接触到她 。18100:10:36,019 --> 00:10:37,279我们可以18200:10:37,279 --> 00:10:41,449用一个非常类似的概念来解决这个问题， 我们已经18300:10:41,449 --> 00:10:42,410在老早之前的数据透视表的视频里使用过这种方法，18400:10:42,410 --> 00:10:46,249它就是DISTINCT。 如果我们加上对这个的使用，我们就只得到两个18500:10:46,249 --> 00:10:49,749Bacon数为3的演员。 所以 ，你看到的它只是18600:10:49,749 --> 00:10:53,759单行，随后我们得到Bacon数为2的所有人，18700:10:53,759 --> 00:10:54,399得到Bacon数为18800:10:54,399 --> 00:10:58,8993的所有人已经是相当惊人了，但我们可以做得更好。18900:10:58,899 --> 00:10:59,879我们可以只用一行Cypher代码计算出19000:10:59,879 --> 00:11:03,420所有人的Bacon数。19100:11:03,420 --> 00:11:08,499所以，我们即将做的事情就是：我们要说19200:11:08,499 --> 00:11:11,350给我最短的路径，然而最短的路径19300:11:11,350 --> 00:11:15,800不是我已经定义的函数， 这仅仅是一个存在于 19400:11:15,800 --> 00:11:17,730Cypher的内置功能。 因此，我们会说：19500:11:17,730 --> 00:11:22,660给我从与凯文·培根匹配的节点处出发的最短路径，我们已经在19600:11:22,660 --> 00:11:24,629先前的问题中看到过，19700:11:24,629 --> 00:11:30,360而我想要的只是该明星，所以不是两个步数、四个步数或19800:11:30,360 --> 00:11:34,759100个步数，不是任何数目的步数。 我们并不在乎，这就是小星这标志所19900:11:34,759 --> 00:11:36,069代表的，20000:11:36,069 --> 00:11:40,079而再一次申明：我们要得到的结果是该演员的名字，20100:11:40,079 --> 00:11:43,959但是我们已经把该路径命名为‘p',20200:11:43,959 --> 00:11:47,550所以我们也希望得到这条路径的长度。 看吧！20300:11:47,550 --> 00:11:52,319现在我们的确得到： 凯文·培根的Bacon数是0， 因为20400:11:52,319 --> 00:11:57,670从他到他自己的路径是零，而 Bacon数为2的人20500:11:57,670 --> 00:12:00,059有两个分离度，以及Bacon数为3的20600:12:00,059 --> 00:12:03,059有四个分离度。 现在我们几乎要完成了 ，我们只希望20700:12:03,059 --> 00:12:04,899凯文·培根的Bacon数是1，并且所有20800:12:04,899 --> 00:12:06,179其他人把20900:12:06,179 --> 00:12:10,639两个步数视为一个步数。 所以，如果我们把它除以两再加上一，21000:12:10,639 --> 00:12:14,059我们就有所有大家的Bacon数了，21100:12:14,059 --> 00:12:16,999在Cypher只有一行的情况下，21200:12:16,999 --> 00:12:21,279 路径的长度并不重要。 是不是很酷呢？ 记得上周，我们需要21300:12:21,279 --> 00:12:25,87925组数组公式 ，对于所有的演员，我们仍然需要21400:12:25,879 --> 00:12:32,629Python中的20、25行，但是我们仅用Cypher中短短的一行就能做到这一点。21500:12:32,629 --> 00:12:35,239所以，不要误会我的意思，这并不是 Neo4j21600:12:35,239 --> 00:12:39,230广告，我并不是说Neo4j 比Python或21700:12:39,230 --> 00:12:41,239Excel更好，21800:12:41,239 --> 00:12:43,899对于一些较为图形化的问题而言，21900:12:43,899 --> 00:12:47,220Neo4j确实是一个很好的解决方案， 但是22000:12:47,220 --> 00:12:50,449就像吃蜗牛时使用的钳子一样，它只能被运用在特定的情况下。22100:12:50,449 --> 00:12:55,850你不能用它来进行规划或预算。 这只是一款特定的工具。22200:12:55,850 --> 00:12:59,410所以我希望大家从这周和前一周的视频中学到的是，22300:12:59,410 --> 00:13:02,819有时你不应该立即选择22400:13:02,819 --> 00:13:05,319你所惯用的电子表格。 当然 在22500:13:05,319 --> 00:13:06,600前六周22600:13:06,600 --> 00:13:07,360我向你演示了22700:13:07,360 --> 00:13:11,089一切关于学习电子表格的方法 ，你可以22800:13:11,089 --> 00:13:11,980用它们做很多事情。22900:13:11,980 --> 00:13:15,540但有时不从电子表格出发来思考23000:13:15,540 --> 00:13:18,679也是非常棒的策略。 先别奔向您的计算机，23100:13:18,679 --> 00:13:23,259先思考一个问题，请去白板，有时你可以使用一款非常适合你的工具，23200:13:23,259 --> 00:13:27,470它能让你更好得处理你问题中的某一小部分。23300:13:27,470 --> 00:13:30,519所以，如果你需要计算 Bacon数23400:13:30,519 --> 00:13:35,089比起电子表格，现在你已经知道Neo4j，或其他图形数据库。它们可能是一个23500:13:35,089 --> 00:13:36,070更好的解决方案。